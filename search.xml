<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022牛客五一集训派对day2题解</title>
    <url>/2022/05/08/2022%E7%89%9B%E5%AE%A2%E4%BA%94%E4%B8%80%E9%9B%86%E8%AE%AD%E6%B4%BE%E5%AF%B9day2%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="比赛链接：-https-ac-nowcoder-com-acm-contest-33550-question"><a href="#比赛链接：-https-ac-nowcoder-com-acm-contest-33550-question" class="headerlink" title="比赛链接：(https://ac.nowcoder.com/acm/contest/33550#question)"></a>比赛链接：(<a href="https://ac.nowcoder.com/acm/contest/33550#question">https://ac.nowcoder.com/acm/contest/33550#question</a>)</h1><hr>
<h2 id="E-Music-Game"><a href="#E-Music-Game" class="headerlink" title="E Music Game"></a><a href="https://ac.nowcoder.com/acm/contest/33550/E">E Music Game</a></h2><p><strong>题目描述</strong></p>
<blockquote>
<p>Niuniu likes to play OSU!<br>We simplify the game OSU to the following problem. </p>
</blockquote>
<p>Given n and m, there are n clicks. Each click may success or fail.<br>For a continuous success sequence with length X, the player can score X^m.<br>The probability that the i-th click success is p[i]/100.</p>
<blockquote>
</blockquote>
<p>We want to know the expectation of score.<br>As the result might be very large (and not integral), you only need to output the result mod 1000000007. </p>
<p><strong>输入描述</strong></p>
<blockquote>
<p>The first line contains two integers, which are n and m.<br>The second line contains n integers. The i-th integer is p[i].</p>
</blockquote>
<p>1 &lt;= n &lt;= 1000<br>1 &lt;= m &lt;= 1000<br>0 &lt;= p[i] &lt;= 100</p>
<p><strong>输出描述</strong></p>
<blockquote>
<p>You should output an integer, which is the answer.               </p>
</blockquote>
<p><strong>输入</strong></p>
<blockquote>
<p>3 4<br>50 50 50</p>
</blockquote>
<p><strong>输出</strong></p>
<blockquote>
<p>750000020</p>
</blockquote>
<p><strong>说明</strong></p>
<blockquote>
<p>000 0<br>001 1<br>010 1<br>011 16<br>100 1<br>101 2<br>110 16<br>111 81</p>
</blockquote>
<p>The exact answer is (0 + 1 + 1 + 16 + 1 + 2 + 16 + 81) / 8 = 59/4.<br>As 750000020 * 4 mod 1000000007 = 59<br>You should output 750000020.</p>
<hr>
<p>简单翻译一下，给出一个长度为$n$的01串，每个位置为1的概率是$p[i]%$，即$\frac{p[i]}{100}$。<br>对于每个长度为$X$的连续为1的串，将获得大小为$X^m$的得分。<br>求这个长度为$n$的01串的得分的期望，结果可能是分数，需要对分数取模。</p>
<p>这里需要补充一个前置知识，如何对分数$\frac{b}{a}$取模：</p>
<blockquote>
<p><strong>费马小定理</strong>：$a^p\ %\ p\ ==\ a\ %\ p$<br>等式两边同时除以$a^2$得，$a^{p-2}\ %\ p\ ==\ \frac{1}{a}\ %\ p$<br>两边再乘以$b$得，$b*a^{p-2}\ %\ p\ ==\ \frac{b}{a}\ %\ p$</p>
</blockquote>
<p>因此下面涉及取模运算的，都是乘上$a^p-2$再取模</p>
<hr>
<p>这道题需要计算得分的期望值，第一眼感觉是一道概率的题，数学相关，然后发现其实是一道<del>动态规划</del>的题，<strong>区间DP</strong>的思想吧。</p>
<p>$dp[i][j]$表示从 $i$ 到 $j$ 这段全部为 1 的概率，状态转移方程如下：<br>$$<br>dp[i][j]=\begin{cases}<br>\frac{p[i]}{100}\ %\ MOD &amp; i==j \<br>dp[i][j-1]\ *\ \frac{p[j]}{100}\ %\ MOD &amp; i!=j \<br>\end{cases}<br>$$</p>
<p>如果$i==j$，说明当前只有一个位置，那就直接对$\frac{p[i]}{100}$进行取模处理；<br>如果$i!=j$，当前的串$[i:j]$就是$[i:j-1]$加上$[j]$，就是$dp[i][j-1]$乘上$\frac{p[j]}{100}$再取模。</p>
<p>随后根据dp数组求解期望值。<br>推理可得，每一段是否能够有效得分，只与<strong>该段全为1的概率</strong>和<strong>前后两个位置为0的概率</strong>相关。</p>
<blockquote>
<p>举个栗子<br>n=5的时候，第3、4位为1的可能情况有：00<strong>11</strong>0、01<strong>11</strong>0、10<strong>11</strong>0、11<strong>11</strong>0、00<strong>11</strong>1、01<strong>11</strong>1、10<strong>11</strong>1、11<strong>11</strong>1，<br>由于只需要求第3、4位为1时的期望值，那就只考虑第1、5位为0的概率，将他们代入计算，而不用考虑其他位置的影响。</p>
</blockquote>
<p>考虑如何处理边界，就把第0、n+1位默认置为0，即把这两个位置恒当作0。</p>
<p>两层for循环枚举出边界，当前的边界为$i\ in\ [1:n]$和$j\ in\ [i:n]$，期望值就是$dp[i][j]\ *\ (i-j+1)^m\ *\ (1-\frac{p[i-1]}{100})\ *\ (1-\frac{p[j+1]}{100})\ %\ MOD$</p>
<p>注：需要对int类型转换一下，乘上1ll。<del>如果不加，在运算的时候可能就爆了。</del></p>
<hr>
<p><strong>AC代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD=<span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p[N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> X[N];</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">binpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">	ll ans=<span class="number">1</span>;</span><br><span class="line">	a%=MOD;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (b)&#123;</span><br><span class="line">		<span class="keyword">if</span> (b&amp;<span class="number">1</span>) ans=(ans*a)%MOD;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">		a=(a*a)%MOD;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">		<span class="built_in">freopen</span>(<span class="string">&quot;title.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">		<span class="built_in">freopen</span>(<span class="string">&quot;title.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> n,m;</span><br><span class="line">	ll inv=<span class="built_in">binpow</span>(<span class="number">100</span>,MOD<span class="number">-2</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		cin&gt;&gt;p[i];</span><br><span class="line">		X[i]=<span class="built_in">binpow</span>(i,m);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		dp[i][i]=p[i]*inv % MOD;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=n;++j) dp[i][j]=<span class="number">1ll</span> * dp[i][j<span class="number">-1</span>] * p[j] % MOD * inv % MOD;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j=i;j&lt;=n;++j)&#123;</span><br><span class="line">			ans=(ans + <span class="number">1ll</span> * dp[i][j] * X[j-i+<span class="number">1</span>] %MOD *(<span class="number">100</span>-p[i<span class="number">-1</span>]) %MOD *inv %MOD *(<span class="number">100</span>-p[j+<span class="number">1</span>]) %MOD *inv %MOD) % MOD;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>ACM</tag>
        <tag>牛客竞赛</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>ACMer的头文件</title>
    <url>/2022/05/07/ACMer%E7%9A%84%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>emmm个人感觉比较实用，有必要学一波</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i,a,b) for (int i=a;i&lt;b;++i)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i,a,b) for (int i=a;i&gt;b;--i)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid (l+(r-l)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson (k&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson (k&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEM(a,x) memset(a,x,sizeof(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="include部分"><a href="#include部分" class="headerlink" title="include部分"></a>include部分</h1><p><strong>iostream库</strong>，C++标准输入输出的头文件，包含了C++输入输出流函数，也就是经典的cin、cout。<br>cin、cout的开销要比C语言下的scanf和printf慢很多，很容易影响程序运行的性能。<br>所以对于ACMer来说，能用scanf和printf完成的，就绝对不会用cin、cout。<br>当然scanf和printf也不是最快的，还有更快的getchar和putchar，可以手写循环读入char然后转成int或者是float的函数。</p>
<p><strong>cstdio库</strong>是C语言中的输入输出函数。</p>
<p><strong>cstring库</strong>同样属于C语言，是C语言中的字符串库，有很多字符串相关的函数。<br>由于性能的原因，能用C语言中char数组完成的就不用使用C++的string。<br>接下来的<strong>string库</strong>则是C++的字符串处理库。</p>
<p><strong>cstdlib库</strong>封装了一些常用的库函数，如rand、srand、free、malloc等。</p>
<p><strong>cmath库</strong>封装了一些数学运算相关的库函数，如pow、sqrt等。</p>
<p><strong>queue、vector、map、set</strong>都是STL库，包含了一些比较好用的数据结构。比如queue中封装了queue以及dequeue，和priority_queue，也就是队列、双端队列和优先队列。vector、map、set分别是线性表、映射表以及集合，熟练使用它们可以极大的降低编码的复杂度。</p>
<p><strong>algorithm库</strong>封装了不少的算法。比如sort排序、reverse翻转、next_permutation下一个全排列、lower_bound、upper_bound函数等。</p>
<hr>
<h1 id="define部分"><a href="#define部分" class="headerlink" title="define部分"></a>define部分</h1><p><strong>pii</strong>代替pair&lt;int, int&gt;，方便绑定两个int变量。</p>
<p><strong>rep</strong>是repeat的缩写，使用的时候只需要rep(i, a, b)就可以代替冗长的for循环的编写，其中i是循环变量，a和b分别是循环的上下界，注意是左闭右开区间。</p>
<p><strong>per</strong>也是同样的逻辑，只不过是倒序的循环。</p>
<p><strong>lson</strong>和<strong>rson</strong>用在线段树当中。如果某一个节点的下标是u，那么它的左孩子是2 * u，右孩子的id是2 * u + 1，用位运算来表示就是u &lt;&lt; 1和u &lt;&lt; 1 | 1。</p>
<p><strong>MEM</strong>是memset的缩写，用来初始化数组。</p>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM板子</title>
    <url>/2022/03/21/ACM%E6%9D%BF%E5%AD%90/</url>
    <content><![CDATA[<h1 id="各种排序"><a href="#各种排序" class="headerlink" title="各种排序"></a>各种排序</h1><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">qsort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> mid=a[l+(r-l)/<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> i=l,j=r;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (a[i]&lt;mid) ++i;</span><br><span class="line">        <span class="keyword">while</span> (a[j]&gt;mid) --j;</span><br><span class="line">        <span class="keyword">if</span> (i&lt;=j)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[i],a[j]);</span><br><span class="line">            ++i;</span><br><span class="line">            --j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span> (i&lt;=j);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (l&lt;j) <span class="built_in">qsort</span>(a,l,j);</span><br><span class="line">	<span class="keyword">if</span> (i&lt;r) <span class="built_in">qsort</span>(a,i,r);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="经典快排"><a href="#经典快排" class="headerlink" title="经典快排"></a>经典快排</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">paritition</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> pivot=a[l];</span><br><span class="line">    <span class="keyword">while</span> (l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;r &amp;&amp; a[r]&gt;=pivot) --r;</span><br><span class="line">        a[l]=a[r];</span><br><span class="line">        <span class="keyword">while</span> (l&lt;r &amp;&amp; a[l]&lt;=pivot) ++l;</span><br><span class="line">        a[r]=a[l];</span><br><span class="line">    &#125;</span><br><span class="line">    a[l]=pivot;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">qsort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;r)&#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">paritition</span>(a,l,r);</span><br><span class="line">        <span class="built_in">qsort</span>(a,l,x<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">qsort</span>(a,x+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="快排思想，找第k个数"><a href="#快排思想，找第k个数" class="headerlink" title="快排思想，找第k个数"></a>快排思想，找第k个数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">paritition</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> pivot=a[l];</span><br><span class="line">    <span class="keyword">while</span> (l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;r &amp;&amp; a[r]&gt;=pivot) --r;</span><br><span class="line">        a[l]=a[r];</span><br><span class="line">        <span class="keyword">while</span> (l&lt;r &amp;&amp; a[l]&lt;=pivot) ++l;</span><br><span class="line">        a[r]=a[l];</span><br><span class="line">    &#125;</span><br><span class="line">    a[l]=pivot;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp=<span class="built_in">paritition</span>(a,l,r);</span><br><span class="line">    <span class="keyword">if</span> (tmp==k) <span class="keyword">return</span> a[tmp];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tmp&gt;k) <span class="built_in">find</span>(a,l,tmp<span class="number">-1</span>,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tmp&lt;k) <span class="built_in">find</span>(a,tmp+<span class="number">1</span>,r,k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="归并排序，求逆序对数"><a href="#归并排序，求逆序对数" class="headerlink" title="归并排序，求逆序对数"></a>归并排序，求逆序对数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l,<span class="type">int</span> m,<span class="type">int</span> r,<span class="type">int</span> &amp;ans)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp[r-l+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> i=l,j=m+<span class="number">1</span>,k=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i&lt;=m &amp;&amp; j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i]&lt;=a[j]) tmp[k++]=a[i++];</span><br><span class="line">        <span class="keyword">else</span> ans+=j-k-l,tmp[k++]=a[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=m) tmp[k++]=a[i++];</span><br><span class="line">    <span class="keyword">while</span> (j&lt;=r) tmp[k++]=a[j++];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=l;i&lt;=r;++i) a[i]=tmp[i-l];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mergesort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> &amp;ans)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;r)&#123;</span><br><span class="line">        <span class="type">int</span> m=l+(r-l)/<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">Mergesort</span>(a,l,m,ans);</span><br><span class="line">        <span class="built_in">Mergesort</span>(a,m+<span class="number">1</span>,r,ans);</span><br><span class="line">        <span class="built_in">Merge</span>(a,l,m,r,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> isp[N];</span><br><span class="line"><span class="type">int</span> pri[N],pn;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FastSieve</span><span class="params">(<span class="type">int</span> MAXN)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(isp,<span class="literal">true</span>,<span class="built_in">sizeof</span>(isp));</span><br><span class="line">    isp[<span class="number">0</span>]=isp[<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">    pn=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>;i&lt;=MAXN;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (isp[i]) pri[pn++]=i;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;pn;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i*pri[j]&gt;MAXN) <span class="keyword">break</span>;</span><br><span class="line">            isp[i*pri[j]]=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> isp[N];</span><br><span class="line"><span class="type">int</span> pri[N],pn;</span><br><span class="line"><span class="type">int</span> phi[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FastPhi</span><span class="params">(<span class="type">int</span> MAXN)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(isp,<span class="literal">true</span>,<span class="built_in">sizeof</span>(isp));</span><br><span class="line">    isp[<span class="number">0</span>]=isp[<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">    phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    pn=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>;i&lt;=MAXN;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (isp[i])&#123;</span><br><span class="line">            pri[pn++]=i;</span><br><span class="line">            phi[i]=i<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;pn;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i*pri[j]&gt;MAXN) <span class="keyword">break</span>;</span><br><span class="line">            isp[i*pri[j]]=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i%pri[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                phi[i*pri[j]]=phi[i]*pri[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            phi[i*pri[j]]=phi[i]*(pri[j]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetNext</span><span class="params">(<span class="type">char</span> s[],<span class="type">int</span> a[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    a[<span class="number">0</span>]=j;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;s[i]!=<span class="string">&#x27;\0&#x27;</span>;++i)&#123;				<span class="comment">//next[]数组可用于判断循环节</span></span><br><span class="line">        <span class="keyword">while</span> (j&gt;<span class="number">0</span> &amp;&amp; s[i]!=s[j]) j=a[j<span class="number">-1</span>];		<span class="comment">//若len能被len-next[len-1]整除</span></span><br><span class="line">        <span class="keyword">if</span> (s[i]==s[j]) ++j;					<span class="comment">//则循环次数为len/(len-next[len-1])</span></span><br><span class="line">        a[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">char</span> s1[],<span class="type">char</span> s2[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(s1),j=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> next[len];</span><br><span class="line">    <span class="built_in">GetNext</span>(s2,next);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;s1[i]!=<span class="string">&#x27;\0&#x27;</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">while</span> (j&gt;<span class="number">0</span> &amp;&amp; s1[i]!=s2[j]) j=next[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span> (s1[i]==s2[j]) ++j;</span><br><span class="line">        <span class="keyword">if</span> (j==len) cout&lt;&lt;i-j+<span class="number">1</span>&gt;&gt;endl;			<span class="comment">//匹配的首字符的下标</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h1><h2 id="无符号"><a href="#无符号" class="headerlink" title="无符号"></a>无符号</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">deal</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;x,string s)</span></span>&#123;					<span class="comment">//大数的预处理</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=s.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">		x.<span class="built_in">push_back</span>(s[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; _add(vector&lt;<span class="type">int</span>&gt;a,vector&lt;<span class="type">int</span>&gt;b)&#123;		<span class="comment">//真正意义上的a+b </span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;ans;</span><br><span class="line">	<span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>() || i&lt;b.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&lt;a.<span class="built_in">size</span>()) t+=a[i];</span><br><span class="line">		<span class="keyword">if</span>(i&lt;b.<span class="built_in">size</span>()) t+=b[i];</span><br><span class="line">		</span><br><span class="line">		ans.<span class="built_in">push_back</span>(t%<span class="number">10</span>);</span><br><span class="line">		t=t/<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (t) ans.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; _sub(vector&lt;<span class="type">int</span>&gt;a,vector&lt;<span class="type">int</span>&gt;b)&#123;		<span class="comment">//真正意义上的a-b </span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;ans;</span><br><span class="line">	<span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">		t=a[i]-t;</span><br><span class="line">		<span class="keyword">if</span> (i&lt;b.<span class="built_in">size</span>()) t-=b[i];</span><br><span class="line">		ans.<span class="built_in">push_back</span>((t+<span class="number">10</span>)%<span class="number">10</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (t&lt;<span class="number">0</span>) t=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> t=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (ans.<span class="built_in">back</span>()==<span class="number">0</span> &amp;&amp; ans.<span class="built_in">size</span>()&gt;<span class="number">1</span>) ans.<span class="built_in">pop_back</span>();</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; _mul(vector&lt;<span class="type">int</span>&gt;a,vector&lt;<span class="type">int</span>&gt;b)&#123;		<span class="comment">//真正意义上的a*b </span></span><br><span class="line">	vector &lt;<span class="type">int</span>&gt;<span class="built_in">ans</span>(a.<span class="built_in">size</span>()+b.<span class="built_in">size</span>()+<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> n=a.<span class="built_in">size</span>()+b.<span class="built_in">size</span>()+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;b.<span class="built_in">size</span>();++j)&#123;</span><br><span class="line">			ans[i+j]+=a[i]*b[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span> (ans[i]&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">			ans[i+<span class="number">1</span>]+=ans[i]/<span class="number">10</span>;</span><br><span class="line">			ans[i]%=<span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (ans.<span class="built_in">back</span>()==<span class="number">0</span> &amp;&amp; ans.<span class="built_in">size</span>()&gt;<span class="number">1</span>) ans.<span class="built_in">pop_back</span>();</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i) cout&lt;&lt;a[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="有符号"><a href="#有符号" class="headerlink" title="有符号"></a>有符号</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">x</span>&#123;									<span class="comment">//大整数和符号位的封装</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;num;</span><br><span class="line">	<span class="type">bool</span> sign;		<span class="comment">//true为正，false为负 </span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deal</span><span class="params">(Node &amp;x,string s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=s.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">		x.num.<span class="built_in">push_back</span>(s[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	x.sign=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt;a,vector&lt;<span class="type">int</span>&gt;b)</span></span>&#123;				<span class="comment">//整数的大小比较，true则a大 </span></span><br><span class="line">	<span class="keyword">if</span> (a.<span class="built_in">size</span>()!=b.<span class="built_in">size</span>()) <span class="keyword">return</span> a.<span class="built_in">size</span>()&gt;=b.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">		<span class="keyword">if</span> (a[i]!=b[i])</span><br><span class="line">			<span class="keyword">return</span> a[i]&gt;b[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node <span class="title">add</span><span class="params">(Node a,Node b)</span></span>&#123;							<span class="comment">//a+b</span></span><br><span class="line">	Node ans;</span><br><span class="line">	<span class="keyword">if</span> (a.sign==<span class="literal">true</span> &amp;&amp; b.sign==<span class="literal">true</span>)&#123;</span><br><span class="line">		ans.sign=<span class="literal">true</span>;</span><br><span class="line">		ans.num=_add(a.num,b.num);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (a.sign==<span class="literal">false</span> &amp;&amp; b.sign==<span class="literal">false</span>)&#123;</span><br><span class="line">		ans.sign=<span class="literal">false</span>;</span><br><span class="line">		ans.num=_add(a.num,b.num);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (a.sign==<span class="literal">true</span> &amp;&amp; b.sign==<span class="literal">false</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">cmp</span>(a.num,b.num))&#123;	<span class="comment">//a大 </span></span><br><span class="line">			ans.sign=<span class="literal">true</span>;</span><br><span class="line">			ans.num=_sub(a.num,b.num); </span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;					<span class="comment">//b大 </span></span><br><span class="line">			ans.sign=<span class="literal">false</span>;</span><br><span class="line">			ans.num=_sub(b.num,a.num);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (a.sign==<span class="literal">false</span> &amp;&amp; b.sign==<span class="literal">true</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">cmp</span>(a.num,b.num))&#123;	<span class="comment">//a大  </span></span><br><span class="line">			ans.sign=<span class="literal">false</span>;</span><br><span class="line">			ans.num=_sub(a.num,b.num);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;					<span class="comment">//b大 </span></span><br><span class="line">			ans.sign=<span class="literal">true</span>;</span><br><span class="line">			ans.num=_sub(b.num,a.num);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node <span class="title">sub</span><span class="params">(Node a,Node b)</span></span>&#123;							<span class="comment">//a-b</span></span><br><span class="line">	<span class="keyword">if</span> (b.sign) b.sign=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">else</span> b.sign=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">add</span>(a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node <span class="title">mul</span><span class="params">(Node a,Node b)</span></span>&#123;							<span class="comment">//a*b</span></span><br><span class="line">	Node ans;</span><br><span class="line">	<span class="keyword">if</span> (a.sign!=b.sign) ans.sign=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">else</span> ans.sign=<span class="literal">true</span>;</span><br><span class="line">	ans.num=_mul(a.num,b.num);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Node a)</span></span>&#123;									<span class="comment">//输出大整数</span></span><br><span class="line">	<span class="keyword">if</span> (!a.sign) cout&lt;&lt;<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=a.num.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i) cout&lt;&lt;a.num[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> dad[MAXN]=&#123;<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> p=x;</span><br><span class="line">	<span class="keyword">while</span>(dad[p]!=<span class="number">-1</span>) p=dad[p];</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">while</span>(x!=p)&#123;</span><br><span class="line">		<span class="type">int</span> t=dad[x];</span><br><span class="line">		dad[x]=p;</span><br><span class="line">		x=t;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dad[x]&lt;dad[y])&#123;</span><br><span class="line">        dad[x]+=dad[y];</span><br><span class="line">        dad[y]=dad[x];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        dad[y]+=dad[x];</span><br><span class="line">        dad[x]=dad[y];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>ACM</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF：[2019红帽杯]easyRE</title>
    <url>/2022/04/15/BUUCTF%EF%BC%9A-2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/</url>
    <content><![CDATA[<p>下载发现是elf文件</p>
<p><img src="BUUCTF%EF%BC%9A-2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/1.png" alt="1"></p>
<p>拖进IDA 64位，发现空空如也</p>
<p><img src="BUUCTF%EF%BC%9A-2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/2.png" alt="2"></p>
<p>Shift + F12查找一下字符串</p>
<p><img src="BUUCTF%EF%BC%9A-2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/3.png" alt="3"></p>
<p>推测第四个是base64解码，找到所在函数，标记成base64</p>
<p><img src="BUUCTF%EF%BC%9A-2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/4.png" alt="4"></p>
<p>根据中间三个字符串，按X，找到函数的主逻辑。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_4009C6</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-114h]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+10h] [rbp-110h]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-108h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+20h] [rbp-100h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+28h] [rbp-F8h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+30h] [rbp-F0h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+38h] [rbp-E8h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+40h] [rbp-E0h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+48h] [rbp-D8h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+50h] [rbp-D0h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+58h] [rbp-C8h]</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">13</span>]; <span class="comment">// [rsp+60h] [rbp-C0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v13[<span class="number">4</span>]; <span class="comment">// [rsp+6Dh] [rbp-B3h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v14[<span class="number">19</span>]; <span class="comment">// [rsp+71h] [rbp-AFh] BYREF</span></span><br><span class="line">  <span class="type">char</span> v15[<span class="number">32</span>]; <span class="comment">// [rsp+90h] [rbp-90h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [rsp+B0h] [rbp-70h]</span></span><br><span class="line">  <span class="type">char</span> v17; <span class="comment">// [rsp+B4h] [rbp-6Ch]</span></span><br><span class="line">  <span class="type">char</span> v18[<span class="number">72</span>]; <span class="comment">// [rsp+C0h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v19; <span class="comment">// [rsp+108h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v19 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  qmemcpy(v12, <span class="string">&quot;Iodl&gt;Qnb(ocy&quot;</span>, <span class="number">12</span>);</span><br><span class="line">  v12[<span class="number">12</span>] = <span class="number">127</span>;</span><br><span class="line">  qmemcpy(v13, <span class="string">&quot;y.i&quot;</span>, <span class="number">3</span>);</span><br><span class="line">  v13[<span class="number">3</span>] = <span class="number">127</span>;</span><br><span class="line">  qmemcpy(v14, <span class="string">&quot;d`3w&#125;wek9&#123;iy=~yL@EC&quot;</span>, <span class="keyword">sizeof</span>(v14));</span><br><span class="line">  <span class="built_in">memset</span>(v15, <span class="number">0</span>, <span class="keyword">sizeof</span>(v15));</span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">  v17 = <span class="number">0</span>;</span><br><span class="line">  sub_4406E0(<span class="number">0LL</span>, v15, <span class="number">37LL</span>);</span><br><span class="line">  v17 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( sub_424BA0(v15) == <span class="number">36</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; (<span class="type">unsigned</span> __int64)sub_424BA0(v15); ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)(v15[i] ^ i) != v12[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        result = <span class="number">4294967294LL</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_410CC0(<span class="string">&quot;continue!&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(v18, <span class="number">0</span>, <span class="number">0x40</span>uLL);</span><br><span class="line">    v18[<span class="number">64</span>] = <span class="number">0</span>;</span><br><span class="line">    sub_4406E0(<span class="number">0LL</span>, v18, <span class="number">64LL</span>);</span><br><span class="line">    v18[<span class="number">39</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( sub_424BA0(v18) == <span class="number">39</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = base64(v18);</span><br><span class="line">      v3 = base64(v2);</span><br><span class="line">      v4 = base64(v3);</span><br><span class="line">      v5 = base64(v4);</span><br><span class="line">      v6 = base64(v5);</span><br><span class="line">      v7 = base64(v6);</span><br><span class="line">      v8 = base64(v7);</span><br><span class="line">      v9 = base64(v8);</span><br><span class="line">      v10 = base64(v9);</span><br><span class="line">      v11 = base64(v10);</span><br><span class="line">      <span class="keyword">if</span> ( !(<span class="type">unsigned</span> <span class="type">int</span>)sub_400360(v11, off_6CC090) )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_410CC0(<span class="string">&quot;You found me!!!&quot;</span>);</span><br><span class="line">        sub_410CC0(<span class="string">&quot;bye bye~&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      result = <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = <span class="number">4294967293LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">  <span class="keyword">if</span> ( __readfsqword(<span class="number">0x28</span>u) != v19 )</span><br><span class="line">    sub_444020();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看着很复杂，很晕，那就一点一点看吧</p>
<p><img src="BUUCTF%EF%BC%9A-2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/5.png" alt="5"></p>
<p>sub_4406E0应该是输入函数：输入v15；sub_424BA0应该是获取字符串的长度，strlen(v15)=36；v15[i] ^ i =v12[i]。</p>
<p>从地址上看，v12是上面操作的字符串，然后异或后就得到输入的v15字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v12=<span class="string">&quot;Iodl&gt;Qnb(ocy&quot;</span> + <span class="built_in">chr</span>(<span class="number">127</span>) + <span class="string">&quot;y.i&quot;</span> + <span class="built_in">chr</span>(<span class="number">127</span>) + <span class="string">&quot;d`3w&#125;wek9&#123;iy=~yL@EC&quot;</span></span><br><span class="line">s=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v12)):</span><br><span class="line">    s+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(v12[i]) ^ i)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>

<p>输出：<strong>Info:The first four chars are `flag`</strong> </p>
<p>下面还有一个输入的字符串v18</p>
<p><img src="BUUCTF%EF%BC%9A-2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/6.png" alt="6"></p>
<p>发现是对off_6CC090处的字符串进行10次base64加密</p>
<p><img src="BUUCTF%EF%BC%9A-2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/7.png" alt="7"></p>
<p><img src="BUUCTF%EF%BC%9A-2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/8.png" alt="8"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">add=<span class="number">0x00000000004A23A8</span></span><br><span class="line">arr=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">745</span>):</span><br><span class="line">	arr+=<span class="built_in">chr</span>(Byte(add+i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    arr=base64.b64decode(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure>

<p>得到一个网址b’<a href="https://bbs.pediy.com/thread-254172.htm&#39;">https://bbs.pediy.com/thread-254172.htm&#39;</a> ，点进去看看</p>
<p><img src="BUUCTF%EF%BC%9A-2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/9.png" alt="9"></p>
<p>好家伙，是一篇关于主动防御的贴子，现教现卖啊</p>
<p>其实做到这已经做不动了，看了师傅的博客才知道怎么做</p>
<hr>
<p>回到off_6CC090处，发现下面还有一串字符······其实下面的字符才是关键</p>
<p><img src="BUUCTF%EF%BC%9A-2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/10.png" alt="10"></p>
<p>找到引用的函数</p>
<p><img src="BUUCTF%EF%BC%9A-2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/11.png" alt="11"></p>
<p>其中的重要部分如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( ((<span class="type">unsigned</span> __int8)v1 ^ byte_6CC0A0[<span class="number">0</span>]) == <span class="string">&#x27;f&#x27;</span> &amp;&amp; (HIBYTE(v4) ^ (<span class="type">unsigned</span> __int8)byte_6CC0A3) == <span class="string">&#x27;g&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">24</span>; ++j )</span><br><span class="line">      sub_410E90((<span class="type">unsigned</span> __int8)(byte_6CC0A0[j] ^ *((_BYTE *)&amp;v4 + j % <span class="number">4</span>)));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>根据第一个输入字符串的提示，前四个字母是flag，判断这里应该是正确的flag部分</p>
<p>v4是一个大小为4的数组，可以根据前4个字符推出来，然后再和字符串进行异或运算</p>
<p><img src="BUUCTF%EF%BC%9A-2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/12.png" alt="12"></p>
<p>python脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=[</span><br><span class="line">  <span class="number">0x40</span>, <span class="number">0x35</span>, <span class="number">0x20</span>, <span class="number">0x56</span>, <span class="number">0x5D</span>, <span class="number">0x18</span>, <span class="number">0x22</span>, <span class="number">0x45</span>, <span class="number">0x17</span>, <span class="number">0x2F</span>, </span><br><span class="line">  <span class="number">0x24</span>, <span class="number">0x6E</span>, <span class="number">0x62</span>, <span class="number">0x3C</span>, <span class="number">0x27</span>, <span class="number">0x54</span>, <span class="number">0x48</span>, <span class="number">0x6C</span>, <span class="number">0x24</span>, <span class="number">0x6E</span>, </span><br><span class="line">  <span class="number">0x72</span>, <span class="number">0x3C</span>, <span class="number">0x32</span>, <span class="number">0x45</span>, <span class="number">0x5B</span></span><br><span class="line">]</span><br><span class="line">v4=<span class="string">&quot;&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line">s=<span class="string">&quot;flag&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    v4+=<span class="built_in">chr</span>(x[i]^<span class="built_in">ord</span>(s[i]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(x[i]^<span class="built_in">ord</span>(v4[i%<span class="number">4</span>]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p><strong>flag{Act1ve_Defen5e_Test}</strong></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
        <tag>BUUCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF：[ACTF新生赛2020]rome</title>
    <url>/2022/04/13/BUUCTF%EF%BC%9A-ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-rome/</url>
    <content><![CDATA[<p>下载是一个文件夹，找到主程序rome.exe</p>
<p><img src="BUUCTF%EF%BC%9A-ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-rome/1.png" alt="1"></p>
<p>拖进IDA，找到主函数</p>
<p><img src="BUUCTF%EF%BC%9A-ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-rome/2.png" alt="2"></p>
<p>双击打开func()函数，果然有东西</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v1[<span class="number">4</span>]; <span class="comment">// [esp+14h] [ebp-44h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v2; <span class="comment">// [esp+24h] [ebp-34h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v3; <span class="comment">// [esp+25h] [ebp-33h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v4; <span class="comment">// [esp+26h] [ebp-32h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v5; <span class="comment">// [esp+27h] [ebp-31h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v6; <span class="comment">// [esp+28h] [ebp-30h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+29h] [ebp-2Fh]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+2Dh] [ebp-2Bh]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+31h] [ebp-27h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+35h] [ebp-23h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v11; <span class="comment">// [esp+39h] [ebp-1Fh]</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">29</span>]; <span class="comment">// [esp+3Bh] [ebp-1Dh] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(v12, <span class="string">&quot;Qsw3sj_lz4_Ujw@l&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;v2);</span><br><span class="line">  result = v2;</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = v3;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="string">&#x27;C&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = v4;</span><br><span class="line">      <span class="keyword">if</span> ( v4 == <span class="string">&#x27;T&#x27;</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        result = v5;</span><br><span class="line">        <span class="keyword">if</span> ( v5 == <span class="string">&#x27;F&#x27;</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          result = v6;</span><br><span class="line">          <span class="keyword">if</span> ( v6 == <span class="string">&#x27;&#123;&#x27;</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            result = v11;</span><br><span class="line">            <span class="keyword">if</span> ( v11 == <span class="string">&#x27;&#125;&#x27;</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              v1[<span class="number">0</span>] = v7;</span><br><span class="line">              v1[<span class="number">1</span>] = v8;</span><br><span class="line">              v1[<span class="number">2</span>] = v9;</span><br><span class="line">              v1[<span class="number">3</span>] = v10;</span><br><span class="line">              *(_DWORD *)&amp;v12[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">while</span> ( *(<span class="type">int</span> *)&amp;v12[<span class="number">17</span>] &lt;= <span class="number">15</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">if</span> ( *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &gt; <span class="number">64</span> &amp;&amp; *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &lt;= <span class="number">90</span> )</span><br><span class="line">                  *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) = (*((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) - <span class="number">51</span>) % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">                <span class="keyword">if</span> ( *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &gt; <span class="number">96</span> &amp;&amp; *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &lt;= <span class="number">122</span> )</span><br><span class="line">                  *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) = (*((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) - <span class="number">79</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">                ++*(_DWORD *)&amp;v12[<span class="number">17</span>];</span><br><span class="line">              &#125;</span><br><span class="line">              *(_DWORD *)&amp;v12[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">while</span> ( *(<span class="type">int</span> *)&amp;v12[<span class="number">17</span>] &lt;= <span class="number">15</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                result = (<span class="type">unsigned</span> __int8)v12[*(_DWORD *)&amp;v12[<span class="number">17</span>]];</span><br><span class="line">                <span class="keyword">if</span> ( *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) != (_BYTE)result )</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">                ++*(_DWORD *)&amp;v12[<span class="number">17</span>];</span><br><span class="line">              &#125;</span><br><span class="line">              result = <span class="built_in">printf</span>(<span class="string">&quot;You are correct!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>flag的头是ACTF，主体则是int数组v1[4]、unsigned __int8变量v2-v6、int变量v7-v10</p>
<p>而32位中，int型变量的大小是2字节，unsigned __int8型变量的大小是1字节，一共17字节</p>
<p>就相当于17个大小是1字节的char型</p>
<hr>
<p>第一个while循环</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*(_DWORD *)&amp;v12[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( *(<span class="type">int</span> *)&amp;v12[<span class="number">17</span>] &lt;= <span class="number">15</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &gt; <span class="number">64</span> &amp;&amp; *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &lt;= <span class="number">90</span> )</span><br><span class="line">    *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) = (*((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) - <span class="number">51</span>) % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &gt; <span class="number">96</span> &amp;&amp; *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &lt;= <span class="number">122</span> )</span><br><span class="line">    *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) = (*((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) - <span class="number">79</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">  ++*(_DWORD *)&amp;v12[<span class="number">17</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>化简一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( i &lt;= <span class="number">15</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( v1[i] &gt; <span class="string">&#x27;@&#x27;</span> &amp;&amp; v1[i] &lt;= <span class="string">&#x27;Z&#x27;</span> )</span><br><span class="line">    v1[i] = (v1[i] - <span class="string">&#x27;3&#x27;</span>) % <span class="number">26</span> + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v1[i] &gt; <span class="string">&#x27;`&#x27;</span> &amp;&amp; v1[i] &lt;= <span class="string">&#x27;z&#x27;</span> )</span><br><span class="line">    v1[i] = (v1[i] - <span class="string">&#x27;O&#x27;</span>) % <span class="number">26</span> + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">  ++i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现是对flag的主体部分进行加密</p>
<hr>
<p>第二个while循环</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*(_DWORD *)&amp;v12[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( *(<span class="type">int</span> *)&amp;v12[<span class="number">17</span>] &lt;= <span class="number">15</span> )</span><br><span class="line">&#123;</span><br><span class="line">  result = (<span class="type">unsigned</span> __int8)v12[*(_DWORD *)&amp;v12[<span class="number">17</span>]];</span><br><span class="line">  <span class="keyword">if</span> ( *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) != (_BYTE)result )</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  ++*(_DWORD *)&amp;v12[<span class="number">17</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改成正常人能看懂的C语言代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( i &lt;= <span class="number">15</span> )</span><br><span class="line">&#123;</span><br><span class="line">  result = (<span class="type">unsigned</span> __int8);</span><br><span class="line">  <span class="keyword">if</span> ( v1[i] != v12[i] )</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  ++i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现是对flag主体的判断，即：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v1[]=<span class="string">&quot;Qsw3sj_lz4_Ujw@l&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>根据加密过程写C语言脚本</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> s[]=<span class="string">&quot;Qsw3sj_lz4_Ujw@l&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(s);++i)&#123;</span><br><span class="line">		<span class="keyword">if</span> (s[i]&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; s[i]&lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;;++j)&#123;</span><br><span class="line">				<span class="type">char</span> tmp=s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">26</span>*j+<span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">				<span class="keyword">if</span> (tmp&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; tmp&lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">					s[i]=tmp;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (s[i]&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; s[i]&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;;++j)&#123;</span><br><span class="line">				<span class="type">char</span> tmp=s[i]-<span class="string">&#x27;A&#x27;</span>+<span class="number">26</span>*j+<span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">				<span class="keyword">if</span> (tmp&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; tmp&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">					s[i]=tmp;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;flag&#123;&quot;</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>flag{Cae3ar_th4_Gre@t}</strong></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
        <tag>BUUCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF：[FlareOn4]login</title>
    <url>/2022/04/14/BUUCTF%EF%BC%9A-FlareOn4-login/</url>
    <content><![CDATA[<p>是一个html文件，直接拖到Sublime Text打开查看其代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">Html</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>FLARE On 2017<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">id</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Enter the flag&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;prompt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Click to check the flag&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;prompt&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> flag = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;flag&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> rotFlag = flag.<span class="title function_">replace</span>(<span class="regexp">/[a-zA-Z]/g</span>, <span class="keyword">function</span>(<span class="params">c</span>)&#123;<span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &lt;= <span class="string">&quot;Z&quot;</span> ? <span class="number">90</span> : <span class="number">122</span>) &gt;= (c = c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) + <span class="number">13</span>) ? c : c - <span class="number">26</span>);&#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span> == rotFlag) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;Correct flag!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;Incorrect flag, rot again&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>发现flag是对字符串加密得到，加密后的字符串为**”<a href="mailto:&#x50;&#121;&#118;&#x72;&#97;&#103;&#70;&#x76;&#x71;&#x72;&#89;&#98;&#116;&#x76;&#97;&#102;&#78;&#x65;&#x72;&#82;&#110;&#102;&#108;&#x40;&#115;&#x79;&#110;&#101;&#x72;&#x2d;&#98;&#97;&#x2e;&#x70;&#98;&#122;">&#x50;&#121;&#118;&#x72;&#97;&#103;&#70;&#x76;&#x71;&#x72;&#89;&#98;&#116;&#x76;&#97;&#102;&#78;&#x65;&#x72;&#82;&#110;&#102;&#108;&#x40;&#115;&#x79;&#110;&#101;&#x72;&#x2d;&#98;&#97;&#x2e;&#x70;&#98;&#122;</a>“**</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">flag.replace(/[a-zA-Z]/g, function(c)&#123;return String.fromCharCode((c &lt;= &quot;Z&quot; ? 90 : 122) &gt;= (c = c.charCodeAt(0) + 13) ? c : c - 26);&#125;)</span><br></pre></td></tr></table></figure>

<p>主要分析function(c)：</p>
<p>(c &lt;= “Z” ? 90 : 122)，90=**’Z’**，122=**’z’** —-&gt; 如果输入的字母是小写，就返回’z’；否则是大写，返回’Z’</p>
<p>(c = c.charCodeAt(0) + 13) —-&gt; 将字符加上13（刚好是26个字符的一半）</p>
<p>然后判断是否超过当前**’Z**’或**’z’** —-&gt; 如果未越界，就返回被加上13的字符；否则越界，减去26再返回</p>
<hr>
<p><strong>ROT13加密算法</strong></p>
<p>就是将字符后移13位，越界了就转到26个字母的开头，循环进行，最后得到字符串</p>
<hr>
<p>C语言脚本</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> s[]=<span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(s);++i)&#123;</span><br><span class="line">	<span class="type">char</span> c=s[i];</span><br><span class="line">	<span class="keyword">if</span> (s[i]&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; s[i]&lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (c<span class="number">-13</span>&gt;=<span class="string">&#x27;a&#x27;</span>) s[i]-=<span class="number">13</span>;</span><br><span class="line">		<span class="keyword">else</span> s[i]+=<span class="number">13</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (s[i]&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; s[i]&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (c<span class="number">-13</span>&gt;=<span class="string">&#x27;A&#x27;</span>) s[i]-=<span class="number">13</span>;</span><br><span class="line">		<span class="keyword">else</span> s[i]+=<span class="number">13</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;flag&#123;&quot;</span>&lt;&lt;s&lt;&lt;<span class="string">&#x27;&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>flag{<a href="mailto:&#67;&#x6c;&#x69;&#x65;&#x6e;&#116;&#x53;&#105;&#100;&#101;&#x4c;&#x6f;&#103;&#x69;&#110;&#x73;&#x41;&#x72;&#101;&#69;&#97;&#x73;&#121;&#x40;&#x66;&#108;&#x61;&#114;&#101;&#45;&#x6f;&#x6e;&#x2e;&#99;&#111;&#x6d;">&#67;&#x6c;&#x69;&#x65;&#x6e;&#116;&#x53;&#105;&#100;&#101;&#x4c;&#x6f;&#103;&#x69;&#110;&#x73;&#x41;&#x72;&#101;&#69;&#97;&#x73;&#121;&#x40;&#x66;&#108;&#x61;&#114;&#101;&#45;&#x6f;&#x6e;&#x2e;&#99;&#111;&#x6d;</a>}</strong></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
        <tag>BUUCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF：刮开有奖</title>
    <url>/2022/04/12/BUUCTF%EF%BC%9A%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/</url>
    <content><![CDATA[<p>exe文件，先运行看看</p>
<p><img src="BUUCTF%EF%BC%9A%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/1.png" alt="1"></p>
<p>确实是刮奖的</p>
<p>那就拖进看看</p>
<p><img src="BUUCTF%EF%BC%9A%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/2.png" alt="2"></p>
<p>32位，没壳，直接进IDA，F5找到主函数</p>
<p><img src="BUUCTF%EF%BC%9A%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/3.png" alt="3"></p>
<p>发现参数DialogFunc不对劲，双击查看，判断是找到主体函数了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">INT_PTR __stdcall <span class="title function_">DialogFunc</span><span class="params">(HWND hDlg, UINT a2, WPARAM a3, LPARAM a4)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v5; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v7[<span class="number">2</span>]; <span class="comment">// [esp+8h] [ebp-20030h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+10h] [ebp-20028h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+14h] [ebp-20024h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+18h] [ebp-20020h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [esp+1Ch] [ebp-2001Ch]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [esp+20h] [ebp-20018h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [esp+24h] [ebp-20014h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [esp+28h] [ebp-20010h]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [esp+2Ch] [ebp-2000Ch]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [esp+30h] [ebp-20008h]</span></span><br><span class="line">  CHAR String[<span class="number">65536</span>]; <span class="comment">// [esp+34h] [ebp-20004h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v18[<span class="number">65536</span>]; <span class="comment">// [esp+10034h] [ebp-10004h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">272</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 != <span class="number">273</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (_WORD)a3 == <span class="number">1001</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(String, <span class="number">0</span>, <span class="number">0xFFFF</span>u);</span><br><span class="line">    GetDlgItemTextA(hDlg, <span class="number">1000</span>, String, <span class="number">0xFFFF</span>);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(String) == <span class="number">8</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7[<span class="number">0</span>] = <span class="number">90</span>;</span><br><span class="line">      v7[<span class="number">1</span>] = <span class="number">74</span>;</span><br><span class="line">      v8 = <span class="number">83</span>;</span><br><span class="line">      v9 = <span class="number">69</span>;</span><br><span class="line">      v10 = <span class="number">67</span>;</span><br><span class="line">      v11 = <span class="number">97</span>;</span><br><span class="line">      v12 = <span class="number">78</span>;</span><br><span class="line">      v13 = <span class="number">72</span>;</span><br><span class="line">      v14 = <span class="number">51</span>;</span><br><span class="line">      v15 = <span class="number">110</span>;</span><br><span class="line">      v16 = <span class="number">103</span>;</span><br><span class="line">      sub_4010F0(v7, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">      <span class="built_in">memset</span>(v18, <span class="number">0</span>, <span class="number">0xFFFF</span>u);</span><br><span class="line">      v18[<span class="number">0</span>] = String[<span class="number">5</span>];</span><br><span class="line">      v18[<span class="number">2</span>] = String[<span class="number">7</span>];</span><br><span class="line">      v18[<span class="number">1</span>] = String[<span class="number">6</span>];</span><br><span class="line">      v4 = (<span class="type">const</span> <span class="type">char</span> *)sub_401000(v18, <span class="built_in">strlen</span>(v18));</span><br><span class="line">      <span class="built_in">memset</span>(v18, <span class="number">0</span>, <span class="number">0xFFFF</span>u);</span><br><span class="line">      v18[<span class="number">1</span>] = String[<span class="number">3</span>];</span><br><span class="line">      v18[<span class="number">0</span>] = String[<span class="number">2</span>];</span><br><span class="line">      v18[<span class="number">2</span>] = String[<span class="number">4</span>];</span><br><span class="line">      v5 = (<span class="type">const</span> <span class="type">char</span> *)sub_401000(v18, <span class="built_in">strlen</span>(v18));</span><br><span class="line">      <span class="keyword">if</span> ( String[<span class="number">0</span>] == v7[<span class="number">0</span>] + <span class="number">34</span></span><br><span class="line">        &amp;&amp; String[<span class="number">1</span>] == v10</span><br><span class="line">        &amp;&amp; <span class="number">4</span> * String[<span class="number">2</span>] - <span class="number">141</span> == <span class="number">3</span> * v8</span><br><span class="line">        &amp;&amp; String[<span class="number">3</span>] / <span class="number">4</span> == <span class="number">2</span> * (v13 / <span class="number">9</span>)</span><br><span class="line">        &amp;&amp; !<span class="built_in">strcmp</span>(v4, <span class="string">&quot;ak1w&quot;</span>)</span><br><span class="line">        &amp;&amp; !<span class="built_in">strcmp</span>(v5, <span class="string">&quot;V1Ax&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        MessageBoxA(hDlg, <span class="string">&quot;U g3t 1T!&quot;</span>, <span class="string">&quot;@_@&quot;</span>, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (_WORD)a3 != <span class="number">1</span> &amp;&amp; (_WORD)a3 != <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  EndDialog(hDlg, (<span class="type">unsigned</span> __int16)a3);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>依次分析：</strong></p>
<p>String应该是输入的flag，长度为8</p>
<p>v7到v16是个字符串，用快捷键R转成字符</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v7[<span class="number">0</span>] = <span class="string">&#x27;Z&#x27;</span>;</span><br><span class="line">v7[<span class="number">1</span>] = <span class="string">&#x27;J&#x27;</span>;</span><br><span class="line">v8 = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">v9 = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">v10 = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">v11 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">v12 = <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">v13 = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">v14 = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">v15 = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">v16 = <span class="string">&#x27;g&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>得到字符串：”ZJSECaNH3ng”，随后sub_401000函数对字符串进行处理，双击查看</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_4010F0</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// edx</span></span><br><span class="line"></span><br><span class="line">  result = a3;</span><br><span class="line">  <span class="keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="number">4</span> * i;</span><br><span class="line">    v6 = *(_DWORD *)(<span class="number">4</span> * i + a1);</span><br><span class="line">    <span class="keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v6 &gt; *(_DWORD *)(a1 + <span class="number">4</span> * result) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          ++i;</span><br><span class="line">          *(_DWORD *)(v5 + a1) = *(_DWORD *)(a1 + <span class="number">4</span> * result);</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">while</span> ( *(_DWORD *)(a1 + <span class="number">4</span> * i) &lt;= v6 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( ++i &gt;= result )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v5 = <span class="number">4</span> * i;</span><br><span class="line">          *(_DWORD *)(a1 + <span class="number">4</span> * result) = *(_DWORD *)(<span class="number">4</span> * i + a1);</span><br><span class="line">        &#125;</span><br><span class="line">        --result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( i &lt; result );</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">    *(_DWORD *)(a1 + <span class="number">4</span> * result) = v6;</span><br><span class="line">    sub_4010F0(a1, a2, i - <span class="number">1</span>);</span><br><span class="line">    result = a3;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数第一个参数a1应该是一个char数组，函数中的***(_DWORD <em>)(a1 + 4 * result)<strong>和</strong></em>(_DWORD *)(4 * i + a1)<strong>实际上是数组用下标访问，即</strong>a1[result]<strong>和</strong>a1[i]**</p>
<p>改成C语言可执行脚本</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_4010F0</span><span class="params">(<span class="type">char</span> a1[], <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// edx</span></span><br><span class="line"></span><br><span class="line">  result = a3;</span><br><span class="line">  <span class="keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = i;</span><br><span class="line">    v6 = a1[i];</span><br><span class="line">    <span class="keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v6 &gt; a1[result] )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          ++i;</span><br><span class="line">          a1[v5] = a1[result];</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">while</span> ( a1[i] &lt;= v6 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( ++i &gt;= result )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v5 = i;</span><br><span class="line">          a1[result] = a1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        --result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( i &lt; result );</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">    a1[result] = v6;</span><br><span class="line">    sub_4010F0(a1, a2, i - <span class="number">1</span>);</span><br><span class="line">    result = a3;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行得到字符串</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>CEHJNSZagn</span><br></pre></td></tr></table></figure>

<p>根据<strong>String[0] = v7[0] + 34</strong>，<strong>String[1] = v10</strong></p>
<p>得到String[0]=’U’，String[0]=’J’</p>
<p>下面还有一个字符串处理函数**(const char <em>)sub_401000(v18, strlen(v18))</em>*</p>
<p>带进去发现到一个字符串</p>
<p><img src="BUUCTF%EF%BC%9A%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/4.png" alt="4"></p>
<p>推测应该是base64加密</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strcmp</span>(v4, <span class="string">&quot;ak1w&quot;</span>)</span><br><span class="line"><span class="built_in">strcmp</span>(v5, <span class="string">&quot;V1Ax&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>其中，v4是由**String[5]<strong>、</strong>String[6]<strong>、</strong>String[7]<strong>加密得到，v5是由</strong>String[2]<strong>、</strong>String[3]<strong>、</strong>String[4]**加密得到</p>
<p>解密后得到：v4=”jMp”，v5=”WP1”</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">String[]=<span class="string">&quot;UJWP1jMp&quot;</span></span><br></pre></td></tr></table></figure>

<p>包上flag，即</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">flag&#123;UJWP1jMp&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
        <tag>BUUCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF：简单注册器</title>
    <url>/2022/04/12/BUUCTF%EF%BC%9A%E7%AE%80%E5%8D%95%E6%B3%A8%E5%86%8C%E5%99%A8/</url>
    <content><![CDATA[<p>是个apk文件，用jeb反编译一下</p>
<p>找到MainActivity，用Tab犍转换成能看懂的java代码</p>
<p>其中关键部分如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">v11</span> <span class="operator">=</span> <span class="number">0x1F</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">v9</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">v2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">v6</span> <span class="operator">=</span> <span class="built_in">this</span>.val$editview.getText().toString();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(v6.length() != <span class="number">0x20</span> || v6.charAt(v11) != <span class="number">97</span> || v6.charAt(<span class="number">1</span>) != <span class="number">98</span> || v6.charAt(<span class="number">0</span>) + v6.charAt(v9) - <span class="number">0x30</span> != <span class="number">56</span>) &#123;</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(v2 == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">char</span>[] v5 = <span class="string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span>.toCharArray();</span><br><span class="line">    v5[v9] = ((<span class="type">char</span>)(v5[v9] + v5[<span class="number">3</span>] - <span class="number">50</span>));</span><br><span class="line">    v5[<span class="number">4</span>] = ((<span class="type">char</span>)(v5[v9] + v5[<span class="number">5</span>] - <span class="number">0x30</span>));</span><br><span class="line">    v5[<span class="number">30</span>] = ((<span class="type">char</span>)(v5[v11] + v5[<span class="number">9</span>] - <span class="number">0x30</span>));</span><br><span class="line">    v5[<span class="number">14</span>] = ((<span class="type">char</span>)(v5[<span class="number">27</span>] + v5[<span class="number">28</span>] - <span class="number">97</span>));</span><br><span class="line">    <span class="type">int</span> v4;</span><br><span class="line">    <span class="keyword">for</span>(v4 = <span class="number">0</span>; v4 &lt; <span class="number">16</span>; ++v4) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">v0</span> <span class="operator">=</span> v5[<span class="number">0x1F</span> - v4];</span><br><span class="line">        v5[<span class="number">0x1F</span> - v4] = v5[v4];</span><br><span class="line">        v5[v4] = v0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.val$textview.setText(<span class="string">&quot;flag&#123;&quot;</span> + String.valueOf(v5) + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中有用的信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">v11</span> <span class="operator">=</span> <span class="number">0x1F</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">v9</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">v2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>[] v5 = <span class="string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span>;</span><br><span class="line">v5[v9] = v5[v9] + v5[<span class="number">3</span>] - <span class="number">50</span>;</span><br><span class="line">v5[<span class="number">4</span>] = v5[v9] + v5[<span class="number">5</span>] - <span class="number">0x30</span>;</span><br><span class="line">v5[<span class="number">30</span>] = v5[v11] + v5[<span class="number">9</span>] - <span class="number">0x30</span>;</span><br><span class="line">v5[<span class="number">14</span>] = v5[<span class="number">27</span>] + v5[<span class="number">28</span>] - <span class="number">97</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">v4</span> <span class="operator">=</span> <span class="number">0</span>; v4 &lt; <span class="number">16</span>; ++v4) &#123;</span><br><span class="line">    <span class="type">char</span> <span class="variable">v0</span> <span class="operator">=</span> v5[<span class="number">0x1F</span> - v4];</span><br><span class="line">    v5[<span class="number">0x1F</span> - v4] = v5[v4];</span><br><span class="line">    v5[v4] = v0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;flag&#123;&quot;</span> + v5 + <span class="string">&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p>写C语言脚本处理一下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> v11 = <span class="number">0x1F</span>;</span><br><span class="line">	<span class="type">int</span> v9 = <span class="number">2</span>;</span><br><span class="line">	<span class="type">int</span> v2 = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="type">char</span> v5[]= <span class="string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	v5[v9] = v5[v9] + v5[<span class="number">3</span>] - <span class="number">50</span>;</span><br><span class="line">	v5[<span class="number">4</span>] = v5[v9] + v5[<span class="number">5</span>] - <span class="number">0x30</span>;</span><br><span class="line">	v5[<span class="number">30</span>] = v5[v11] + v5[<span class="number">9</span>] - <span class="number">0x30</span>;</span><br><span class="line">	v5[<span class="number">14</span>] = v5[<span class="number">27</span>] + v5[<span class="number">28</span>] - <span class="number">97</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> v4 = <span class="number">0</span>; v4 &lt; <span class="number">16</span>; ++v4) &#123;</span><br><span class="line">    	<span class="type">char</span> v0 = v5[<span class="number">0x1F</span> - v4];</span><br><span class="line">    	v5[<span class="number">0x1F</span> - v4] = v5[v4];</span><br><span class="line">    	v5[v4] = v0;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;flag&#123;&quot;</span>&lt;&lt;v5&lt;&lt;<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到flag：<strong>flag{59acc538825054c7de4b26440c0999dd}</strong></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
        <tag>BUUCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #791 (Div.2)题解</title>
    <url>/2022/05/15/Codeforces-Round-791-Div-2-%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="A-AvtoBus"><a href="#A-AvtoBus" class="headerlink" title="A. AvtoBus"></a><a href="https://codeforces.com/contest/1679/problem/A">A. AvtoBus</a></h1><p><strong>题目大意</strong>：给定一个整数n，其中$1 \leqslant n \leqslant 10^8$，对于整数x和y，满足 $4<em>x+6</em>y=n$ ，求 $x+y$ 的最小值和最大值，如果不存在，输出-1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	LL n;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">if</span> (n&lt;<span class="number">4</span> || n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">		cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	LL x=n/<span class="number">4</span>,y=n/<span class="number">6</span>;</span><br><span class="line">	<span class="keyword">while</span> ((n-y*<span class="number">6</span>)%<span class="number">4</span>!=<span class="number">0</span>) --y;</span><br><span class="line">	<span class="keyword">while</span> ((n-x*<span class="number">4</span>)%<span class="number">6</span>!=<span class="number">0</span>) --x;</span><br><span class="line">	</span><br><span class="line">	cout&lt;&lt;y+(n-y*<span class="number">6</span>)/<span class="number">4</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;x+(n-x*<span class="number">4</span>)/<span class="number">6</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="B-Stone-Age-Problem"><a href="#B-Stone-Age-Problem" class="headerlink" title="B. Stone Age Problem"></a><a href="https://codeforces.com/contest/1679/problem/B">B. Stone Age Problem</a></h1><p>题目大意：</p>
<p>有一个长度为$n$的数组$a$和q次操作，每次操作有两种情况：<br>​        1、把第$i$个数变成$x$<br>​        2、把所有数变成$x$<br>每次操作后输出当前数组元素之和</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[N];</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,q;</span><br><span class="line">	<span class="type">int</span> flag=<span class="number">0</span>,v;</span><br><span class="line">	LL sum=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">	<span class="built_in">rep</span>(i,<span class="number">1</span>,n+<span class="number">1</span>)&#123;</span><br><span class="line">		cin&gt;&gt;a[i];</span><br><span class="line">		sum+=a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (q--)&#123;</span><br><span class="line">		<span class="type">int</span> t;</span><br><span class="line">		cin&gt;&gt;t;</span><br><span class="line">		<span class="keyword">if</span> (t==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="type">int</span> i,x;</span><br><span class="line">			cin&gt;&gt;i&gt;&gt;x;</span><br><span class="line">			<span class="keyword">if</span> (flag &amp;&amp; b.<span class="built_in">count</span>(i)==<span class="number">0</span>)&#123;</span><br><span class="line">				sum-=v;</span><br><span class="line">				sum+=x;</span><br><span class="line">				b[i]=x;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span> (flag &amp;&amp; b.<span class="built_in">count</span>(i)!=<span class="number">0</span>)&#123;</span><br><span class="line">				sum-=b[i];</span><br><span class="line">				sum+=x;</span><br><span class="line">				b[i]=x;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				sum-=a[i];</span><br><span class="line">				sum+=x;</span><br><span class="line">				a[i]=x;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="type">int</span> x;</span><br><span class="line">			cin&gt;&gt;x;</span><br><span class="line">			sum=<span class="number">1ll</span>*x*n;</span><br><span class="line">			flag=<span class="number">1</span>;</span><br><span class="line">			v=x;</span><br><span class="line">			b.<span class="built_in">clear</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>ACM</tag>
        <tag>题解</tag>
        <tag>codeforce</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown常用语法</title>
    <url>/2022/05/08/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>使用<strong>Typora编辑器</strong></p>
<hr>
<h1 id="基本语法格式"><a href="#基本语法格式" class="headerlink" title="基本语法格式"></a>基本语法格式</h1><table>
<thead>
<tr>
<th>名称</th>
<th>语法</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>标题</td>
<td>用#表示，#一级标题，##表示二级标题，以此类推</td>
<td>Ctrl + 1、2、3、4</td>
</tr>
<tr>
<td><em>斜体字</em></td>
<td>左右用 * 包着</td>
<td>Ctrl + I</td>
</tr>
<tr>
<td><strong>字体加粗</strong></td>
<td>左右用 ** 包着</td>
<td>Ctrl + B</td>
</tr>
<tr>
<td><em><strong>加粗斜体</strong></em></td>
<td>左右用 *** 包着</td>
<td>Ctrl + I ， Ctrl + B（无先后顺序）</td>
</tr>
<tr>
<td><del>中划线</del></td>
<td>左右用 ~~ 包着</td>
<td>Alt + Shift + 5</td>
</tr>
<tr>
<td>引用</td>
<td>文字开头加上 &gt;</td>
<td></td>
</tr>
<tr>
<td>链接</td>
<td>[链接名称](链接网址)</td>
<td>Ctrl + K</td>
</tr>
<tr>
<td>代码块</td>
<td>开头结尾用```包着</td>
<td>Ctrl + Shift + K</td>
</tr>
<tr>
<td>公式块</td>
<td>行内公式：左右用$包上；行间公式：开头结尾用$$包上</td>
<td>Ctrl + Shift+ M（行间公式）</td>
</tr>
<tr>
<td>表格</td>
<td>首行用 &#124; 分隔（表格内换行需要用&lt;br&gt;）</td>
<td>Ctrl + T<br>Ctrl + Enter 添加行</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="数学公式部分"><a href="#数学公式部分" class="headerlink" title="数学公式部分"></a>数学公式部分</h1><table>
<thead>
<tr>
<th>名称</th>
<th>语法</th>
</tr>
</thead>
<tbody><tr>
<td>分数</td>
<td>\frac{分子}{分母}</td>
</tr>
<tr>
<td>次幂</td>
<td>a^b（幂数可以用大括号包起来）</td>
</tr>
<tr>
<td>分段函数</td>
<td>函数名=\begin&#123;cases&#125;<br>公式1 &amp;  条件1<br>公式2 &amp; 条件2<br>\end{cases}</td>
</tr>
<tr>
<td>小于等于号</td>
<td>\leqslant</td>
</tr>
<tr>
<td>大于等于号</td>
<td>\geqslant</td>
</tr>
</tbody></table>
<h1 id="转译字符"><a href="#转译字符" class="headerlink" title="转译字符"></a>转译字符</h1><p>在 Markdown 中使用 <code>\</code> 无法转译的字符需要使用字符的命名实体或十进制编码，再加上分号;</p>
<table>
<thead>
<tr>
<th>特殊符号</th>
<th>命名实体</th>
<th>十进制编码</th>
</tr>
</thead>
<tbody><tr>
<td>竖线</td>
<td>&amp;#x7C</td>
<td>&amp;#124</td>
</tr>
<tr>
<td>&lt;</td>
<td>&amp;lt</td>
<td>&amp;#60</td>
</tr>
<tr>
<td>&gt;</td>
<td>&amp;gt</td>
<td>&amp;#62</td>
</tr>
<tr>
<td>{</td>
<td></td>
<td>&amp;#123</td>
</tr>
<tr>
<td>}</td>
<td></td>
<td>&amp;#125</td>
</tr>
<tr>
<td>\</td>
<td></td>
<td>&amp;#92</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>zzuctf：bin</title>
    <url>/2022/04/12/zzuctf%EF%BC%9Abin/</url>
    <content><![CDATA[<p>这是一个神奇的文件，名字叫做bin</p>
<p>内容很少，只有几行数据</p>
<p><img src="zzuctf%EF%BC%9Abin/1.png" alt="1"></p>
<p>如果需要自行复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00400080  68 4D 00 00 00 48 BF 01  00 00 00 00 00 00 00 48</span><br><span class="line">00400090  8D 34 24 48 BA 02 00 00  00 00 00 00 79 48 B8 01</span><br><span class="line">004000A0  00 00 00 00 00 00 00 0F  05 68 43 54 00 00 48 BF</span><br><span class="line">004000B0  01 00 00 00 00 00 00 00  48 8D 34 24 48 BA 02 00</span><br><span class="line">004000C0  00 00 00 00 00 46 48 B8  01 00 00 00 00 00 00 00</span><br><span class="line">004000D0  0F 05 68 7B 70 00 00 48  BF 01 00 00 00 00 00 00</span><br><span class="line">004000E0  00 48 8D 34 24 48 BA 02  00 00 00 00 00 00 00 48</span><br><span class="line">004000F0  B8 01 00 00 00 00 00 00  00 0F 05 68 6F 70 00 00</span><br><span class="line">00400100  48 BF 01 00 00 00 00 00  00 00 48 8D 34 24 48 BA</span><br><span class="line">00400110  02 00 00 00 00 00 00 00  48 B8 01 00 00 00 00 00</span><br><span class="line">00400120  00 00 0F 05 68 70 6F 00  00 48 BF 01 00 00 00 00</span><br><span class="line">00400130  00 00 00 48 8D 34 24 48  BA 02 00 00 00 00 00 00</span><br><span class="line">00400140  00 48 B8 01 00 00 00 00  00 00 00 0F 05 68 70 72</span><br><span class="line">00400150  00 00 48 BF 01 00 00 00  00 00 00 00 48 8D 34 24</span><br><span class="line">00400160  48 BA 02 00 00 00 00 00  00 00 48 B8 01 00 00 00</span><br><span class="line">00400170  00 00 00 00 0F 05 68 65  74 00 00 48 BF 01 00 00</span><br><span class="line">00400180  00 00 00 00 00 48 8D 34  24 48 BA 02 00 00 00 00</span><br><span class="line">00400190  00 00 00 48 B8 01 00 00  00 00 00 00 00 0F 05 68</span><br><span class="line">004001A0  7D 0A 00 00 48 BF 01 00  00 00 00 00 00 00 48 8D</span><br><span class="line">004001B0  34 24 48 BA 02 00 00 00  00 00 00 00 48 B8 01 00</span><br><span class="line">004001C0  00 00 00 00 00 00 0F 05  48 31 FF 48 B8 3C 00 00</span><br><span class="line">004001D0  00 00 00 00 00 0F 05                            </span><br></pre></td></tr></table></figure>

<hr>
<p><strong>感谢浩然班长的脚本！！</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;D:\\pythonProject\\bin&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">rc = fp.read()</span><br><span class="line">fp.close()</span><br><span class="line">f=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">line = rc.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> ln <span class="keyword">in</span> line:</span><br><span class="line">    ele = ln.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ele:</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(i)==<span class="number">2</span>):</span><br><span class="line">            f+=<span class="built_in">int</span>(i,<span class="number">16</span>).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;D:\\pythonProject\\bin1&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">fp.write(f)</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure>

<p>暂时没思路。。。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界：csaw2013reversing2</title>
    <url>/2022/03/31/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Acsaw2013reversing2/</url>
    <content><![CDATA[<p>运行一下，出来一句乱码</p>
<p><img src="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Acsaw2013reversing2/1.png" alt="1"></p>
<p>exeinfope查一查</p>
<p><img src="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Acsaw2013reversing2/2.png" alt="2"></p>
<p>没壳，直接拖到32位IDA中</p>
<p>找到main函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// ecx</span></span><br><span class="line">  CHAR *lpMem; <span class="comment">// [esp+8h] [ebp-Ch]</span></span><br><span class="line">  HANDLE hHeap; <span class="comment">// [esp+10h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  hHeap = HeapCreate(<span class="number">0x40000</span>u, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  lpMem = (CHAR *)HeapAlloc(hHeap, <span class="number">8u</span>, SourceSize + <span class="number">1</span>);</span><br><span class="line">  memcpy_s(lpMem, SourceSize, &amp;unk_409B10, SourceSize);</span><br><span class="line">  <span class="keyword">if</span> ( !sub_40102A() &amp;&amp; !IsDebuggerPresent() )</span><br><span class="line">  &#123;</span><br><span class="line">    MessageBoxA(<span class="number">0</span>, lpMem + <span class="number">1</span>, <span class="string">&quot;Flag&quot;</span>, <span class="number">2u</span>);</span><br><span class="line">    HeapFree(hHeap, <span class="number">0</span>, lpMem);</span><br><span class="line">    HeapDestroy(hHeap);</span><br><span class="line">    ExitProcess(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  __debugbreak();</span><br><span class="line">  sub_401000(v3 + <span class="number">4</span>, (<span class="type">int</span>)lpMem);</span><br><span class="line">  ExitProcess(<span class="number">0xFFFFFFFF</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sub_40102A函数点进去发现其返回值恒为0</p>
<p>IsDebuggerPresent是一个反调试函数，作用是<strong>确定调用进程是否由用户模式的调试器调试</strong>。<em>如果是，返回非零值；否则当前进程没有运行在调试器的上下文，返回零值。</em></p>
<p>MessageBoxA(0, lpMem + 1, “Flag”, 2u)应该就是显示乱码的函数。</p>
<p>__debugbreak是Microsoft的专用函数，作用是<strong>在代码中引起断点</strong>，<strong>并在其中提示用户运行调试程序</strong>。</p>
<p>sub_401000函数应该是对乱码进行加密，双击查看代码，确认猜想。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __fastcall <span class="title function_">sub_401000</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v2 = dword_409B38;</span><br><span class="line">  v3 = a2 + <span class="number">1</span> + <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)(a2 + <span class="number">1</span>)) + <span class="number">1</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  result = ((v3 - (a2 + <span class="number">2</span>)) &gt;&gt; <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      *(_DWORD *)(a2 + <span class="number">4</span> * v4++) ^= v2;</span><br><span class="line">    <span class="keyword">while</span> ( v4 &lt; result );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那逻辑就应该是，进程不在调试器中，IsDebuggerPresent返回零值，进入if循环，执行MessageBoxA(0, lpMem + 1, “Flag”, 2u)，弹出乱码框；否则，进程在调试器中，IsDebuggerPresent返回非零值，不进入for循环，执行__debugbreak()和sub_401000(v3 + 4, (int)lpMem)处理flag。</p>
<p>正确的执行应该是，跳过调试断点，执行sub_401000(v3 + 4, (int)lpMem)，然后弹窗输出flag。</p>
<hr>
<p>查看流程图</p>
<p><img src="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Acsaw2013reversing2/3.png" alt="3"></p>
<p>可以看到，loc_4010B9的功能是输出flag弹窗（MessageBoxA），大概意思是需要执行函数sub_401000得到正确的flag后再弹窗获得flag。</p>
<p>有三处重要代码：</p>
<ol>
<li>jz short loc_4010B9：这个意思是如果满足判断条件，那就跳转执行函数loc_4010B9，即“弹窗函数”</li>
<li>int 3：中断即为调试断点指令，需要将它改成空指令nop</li>
<li>jmp short loc_4010EF：这个就直接结束函数了</li>
</ol>
<p>很清楚了</p>
<p><strong>Edit–&gt;Patch program–&gt;Assemble</strong>，将int 3改成nop，将jmp short loc_4010EF改成jmp short loc_4010B9，将jz short loc_4010B9改成jmp401096</p>
<p><strong>Edit–&gt;Patch program–&gt;Apply patches to input file</strong>保存文件再打开</p>
<p><img src="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Acsaw2013reversing2/4.png" alt="4"></p>
<p><strong>flag{reversing_is_not_that_hard!}</strong></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
        <tag>攻防世界</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界：game</title>
    <url>/2022/03/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Agame/</url>
    <content><![CDATA[<p>exe文件，运行看看emmm果然是个游戏</p>
<p><img src="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Agame/1.png" alt="1"></p>
<p>拖进exeinfope看看</p>
<p><img src="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Agame/2.png" alt="2"></p>
<p>32位，无壳，拖进IDA找main函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+DCh] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+F4h] [ebp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_45A7BE(&amp;unk_50B110);</span><br><span class="line">  sub_45A7BE(&amp;unk_50B158);</span><br><span class="line">  sub_45A7BE(&amp;unk_50B1A0);</span><br><span class="line">  sub_45A7BE(&amp;unk_50B1E8);</span><br><span class="line">  sub_45A7BE(&amp;unk_50B230);</span><br><span class="line">  sub_45A7BE(&amp;unk_50B278);</span><br><span class="line">  sub_45A7BE(&amp;unk_50B2C0);</span><br><span class="line">  sub_45A7BE(&amp;unk_50B308);</span><br><span class="line">  sub_45A7BE(&amp;unk_50AFD0);</span><br><span class="line">  sub_45A7BE(<span class="string">&quot;|              by 0x61                                 |\n&quot;</span>);</span><br><span class="line">  sub_45A7BE(<span class="string">&quot;|                                                      |\n&quot;</span>);</span><br><span class="line">  sub_45A7BE(<span class="string">&quot;|------------------------------------------------------|\n&quot;</span>);</span><br><span class="line">  sub_45A7BE(</span><br><span class="line">    <span class="string">&quot;Play a game\n&quot;</span></span><br><span class="line">    <span class="string">&quot;The n is the serial number of the lamp,and m is the state of the lamp\n&quot;</span></span><br><span class="line">    <span class="string">&quot;If m of the Nth lamp is 1,it&#x27;s on ,if not it&#x27;s off\n&quot;</span></span><br><span class="line">    <span class="string">&quot;At first all the lights were closed\n&quot;</span>);</span><br><span class="line">  sub_45A7BE(<span class="string">&quot;Now you can input n to change its state\n&quot;</span>);</span><br><span class="line">  sub_45A7BE(</span><br><span class="line">    <span class="string">&quot;But you should pay attention to one thing,if you change the state of the Nth lamp,the state of (N-1)th and (N+1)th w&quot;</span></span><br><span class="line">    <span class="string">&quot;ill be changed too\n&quot;</span>);</span><br><span class="line">  sub_45A7BE(<span class="string">&quot;When all lamps are on,flag will appear\n&quot;</span>);</span><br><span class="line">  sub_45A7BE(<span class="string">&quot;Now,input n \n&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_45A7BE(<span class="string">&quot;input n,n(1-8)\n&quot;</span>);</span><br><span class="line">      sub_459418();</span><br><span class="line">      sub_45A7BE(<span class="string">&quot;n=&quot;</span>);</span><br><span class="line">      sub_4596D4(<span class="string">&quot;%d&quot;</span>, &amp;v5);</span><br><span class="line">      sub_45A7BE(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v5 &gt;= <span class="number">0</span> &amp;&amp; v5 &lt;= <span class="number">8</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      sub_45A7BE(<span class="string">&quot;sorry,n error,try again\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_4576D6(v5 - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)i &gt;= <span class="number">9</span> )</span><br><span class="line">          j____report_rangecheckfailure();</span><br><span class="line">        byte_532E28[i] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    j__system(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">    sub_458054();</span><br><span class="line">    <span class="keyword">if</span> ( byte_532E28[<span class="number">0</span>] == <span class="number">1</span></span><br><span class="line">      &amp;&amp; byte_532E28[<span class="number">1</span>] == <span class="number">1</span></span><br><span class="line">      &amp;&amp; byte_532E28[<span class="number">2</span>] == <span class="number">1</span></span><br><span class="line">      &amp;&amp; byte_532E28[<span class="number">3</span>] == <span class="number">1</span></span><br><span class="line">      &amp;&amp; byte_532E28[<span class="number">4</span>] == <span class="number">1</span></span><br><span class="line">      &amp;&amp; byte_532E28[<span class="number">5</span>] == <span class="number">1</span></span><br><span class="line">      &amp;&amp; byte_532E28[<span class="number">6</span>] == <span class="number">1</span></span><br><span class="line">      &amp;&amp; byte_532E28[<span class="number">7</span>] == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_457AB4();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过分析，前面一堆是输出的函数，而while循环里面的是输入1-8的整数</p>
<p>发现两个关键函数：</p>
<p>sub_4576D6：处理输入数字和游戏之间的逻辑关系；sub_457AB4：处理flag的函数</p>
<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>这是一个比较直接的思路，<strong>直接改汇编</strong></p>
<p><strong>Edit–&gt;Patch program–&gt;Assemble</strong></p>
<p>让函数直接跳转到sub_457AB4函数处理flag输出，</p>
<p><img src="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Agame/3.png" alt="3"></p>
<p>然后将更改应用到程序，就可以直接运行得到flag</p>
<p><strong>Edit–&gt;Patch program–&gt;Apply patches to input file</strong></p>
<p>在文件目录shift+右键打开Powershell窗口运行exe</p>
<p><img src="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Agame/4.png" alt="4"></p>
<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>点进函数sub_457AB4分析逻辑</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_45E940</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+D0h] [ebp-94h]</span></span><br><span class="line">  <span class="type">char</span> v2[<span class="number">22</span>]; <span class="comment">// [esp+DCh] [ebp-88h]</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">32</span>]; <span class="comment">// [esp+F2h] [ebp-72h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">4</span>]; <span class="comment">// [esp+112h] [ebp-52h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">64</span>]; <span class="comment">// [esp+120h] [ebp-44h]</span></span><br><span class="line"></span><br><span class="line">  sub_45A7BE(<span class="string">&quot;done!!! the flag is &quot;</span>);</span><br><span class="line">  v5[<span class="number">0</span>] = <span class="number">18</span>;</span><br><span class="line">  v5[<span class="number">1</span>] = <span class="number">64</span>;</span><br><span class="line">  v5[<span class="number">2</span>] = <span class="number">98</span>;</span><br><span class="line">  v5[<span class="number">3</span>] = <span class="number">5</span>;</span><br><span class="line">  v5[<span class="number">4</span>] = <span class="number">2</span>;</span><br><span class="line">  v5[<span class="number">5</span>] = <span class="number">4</span>;</span><br><span class="line">  v5[<span class="number">6</span>] = <span class="number">6</span>;</span><br><span class="line">  v5[<span class="number">7</span>] = <span class="number">3</span>;</span><br><span class="line">  v5[<span class="number">8</span>] = <span class="number">6</span>;</span><br><span class="line">  v5[<span class="number">9</span>] = <span class="number">48</span>;</span><br><span class="line">  v5[<span class="number">10</span>] = <span class="number">49</span>;</span><br><span class="line">  v5[<span class="number">11</span>] = <span class="number">65</span>;</span><br><span class="line">  v5[<span class="number">12</span>] = <span class="number">32</span>;</span><br><span class="line">  v5[<span class="number">13</span>] = <span class="number">12</span>;</span><br><span class="line">  v5[<span class="number">14</span>] = <span class="number">48</span>;</span><br><span class="line">  v5[<span class="number">15</span>] = <span class="number">65</span>;</span><br><span class="line">  v5[<span class="number">16</span>] = <span class="number">31</span>;</span><br><span class="line">  v5[<span class="number">17</span>] = <span class="number">78</span>;</span><br><span class="line">  v5[<span class="number">18</span>] = <span class="number">62</span>;</span><br><span class="line">  v5[<span class="number">19</span>] = <span class="number">32</span>;</span><br><span class="line">  v5[<span class="number">20</span>] = <span class="number">49</span>;</span><br><span class="line">  v5[<span class="number">21</span>] = <span class="number">32</span>;</span><br><span class="line">  v5[<span class="number">22</span>] = <span class="number">1</span>;</span><br><span class="line">  v5[<span class="number">23</span>] = <span class="number">57</span>;</span><br><span class="line">  v5[<span class="number">24</span>] = <span class="number">96</span>;</span><br><span class="line">  v5[<span class="number">25</span>] = <span class="number">3</span>;</span><br><span class="line">  v5[<span class="number">26</span>] = <span class="number">21</span>;</span><br><span class="line">  v5[<span class="number">27</span>] = <span class="number">9</span>;</span><br><span class="line">  v5[<span class="number">28</span>] = <span class="number">4</span>;</span><br><span class="line">  v5[<span class="number">29</span>] = <span class="number">62</span>;</span><br><span class="line">  v5[<span class="number">30</span>] = <span class="number">3</span>;</span><br><span class="line">  v5[<span class="number">31</span>] = <span class="number">5</span>;</span><br><span class="line">  v5[<span class="number">32</span>] = <span class="number">4</span>;</span><br><span class="line">  v5[<span class="number">33</span>] = <span class="number">1</span>;</span><br><span class="line">  v5[<span class="number">34</span>] = <span class="number">2</span>;</span><br><span class="line">  v5[<span class="number">35</span>] = <span class="number">3</span>;</span><br><span class="line">  v5[<span class="number">36</span>] = <span class="number">44</span>;</span><br><span class="line">  v5[<span class="number">37</span>] = <span class="number">65</span>;</span><br><span class="line">  v5[<span class="number">38</span>] = <span class="number">78</span>;</span><br><span class="line">  v5[<span class="number">39</span>] = <span class="number">32</span>;</span><br><span class="line">  v5[<span class="number">40</span>] = <span class="number">16</span>;</span><br><span class="line">  v5[<span class="number">41</span>] = <span class="number">97</span>;</span><br><span class="line">  v5[<span class="number">42</span>] = <span class="number">54</span>;</span><br><span class="line">  v5[<span class="number">43</span>] = <span class="number">16</span>;</span><br><span class="line">  v5[<span class="number">44</span>] = <span class="number">44</span>;</span><br><span class="line">  v5[<span class="number">45</span>] = <span class="number">52</span>;</span><br><span class="line">  v5[<span class="number">46</span>] = <span class="number">32</span>;</span><br><span class="line">  v5[<span class="number">47</span>] = <span class="number">64</span>;</span><br><span class="line">  v5[<span class="number">48</span>] = <span class="number">89</span>;</span><br><span class="line">  v5[<span class="number">49</span>] = <span class="number">45</span>;</span><br><span class="line">  v5[<span class="number">50</span>] = <span class="number">32</span>;</span><br><span class="line">  v5[<span class="number">51</span>] = <span class="number">65</span>;</span><br><span class="line">  v5[<span class="number">52</span>] = <span class="number">15</span>;</span><br><span class="line">  v5[<span class="number">53</span>] = <span class="number">34</span>;</span><br><span class="line">  v5[<span class="number">54</span>] = <span class="number">18</span>;</span><br><span class="line">  v5[<span class="number">55</span>] = <span class="number">16</span>;</span><br><span class="line">  v5[<span class="number">56</span>] = <span class="number">0</span>;</span><br><span class="line">  v2[<span class="number">0</span>] = <span class="number">123</span>;</span><br><span class="line">  v2[<span class="number">1</span>] = <span class="number">32</span>;</span><br><span class="line">  v2[<span class="number">2</span>] = <span class="number">18</span>;</span><br><span class="line">  v2[<span class="number">3</span>] = <span class="number">98</span>;</span><br><span class="line">  v2[<span class="number">4</span>] = <span class="number">119</span>;</span><br><span class="line">  v2[<span class="number">5</span>] = <span class="number">108</span>;</span><br><span class="line">  v2[<span class="number">6</span>] = <span class="number">65</span>;</span><br><span class="line">  v2[<span class="number">7</span>] = <span class="number">41</span>;</span><br><span class="line">  v2[<span class="number">8</span>] = <span class="number">124</span>;</span><br><span class="line">  v2[<span class="number">9</span>] = <span class="number">80</span>;</span><br><span class="line">  v2[<span class="number">10</span>] = <span class="number">125</span>;</span><br><span class="line">  v2[<span class="number">11</span>] = <span class="number">38</span>;</span><br><span class="line">  v2[<span class="number">12</span>] = <span class="number">124</span>;</span><br><span class="line">  v2[<span class="number">13</span>] = <span class="number">111</span>;</span><br><span class="line">  v2[<span class="number">14</span>] = <span class="number">74</span>;</span><br><span class="line">  v2[<span class="number">15</span>] = <span class="number">49</span>;</span><br><span class="line">  v2[<span class="number">16</span>] = <span class="number">83</span>;</span><br><span class="line">  v2[<span class="number">17</span>] = <span class="number">108</span>;</span><br><span class="line">  v2[<span class="number">18</span>] = <span class="number">94</span>;</span><br><span class="line">  v2[<span class="number">19</span>] = <span class="number">108</span>;</span><br><span class="line">  v2[<span class="number">20</span>] = <span class="number">84</span>;</span><br><span class="line">  v2[<span class="number">21</span>] = <span class="number">6</span>;</span><br><span class="line">  qmemcpy(v3, <span class="string">&quot;`S,yhn _uec&#123;&quot;</span>, <span class="number">12</span>);</span><br><span class="line">  v3[<span class="number">12</span>] = <span class="number">127</span>;</span><br><span class="line">  v3[<span class="number">13</span>] = <span class="number">119</span>;</span><br><span class="line">  v3[<span class="number">14</span>] = <span class="number">96</span>;</span><br><span class="line">  v3[<span class="number">15</span>] = <span class="number">48</span>;</span><br><span class="line">  v3[<span class="number">16</span>] = <span class="number">107</span>;</span><br><span class="line">  v3[<span class="number">17</span>] = <span class="number">71</span>;</span><br><span class="line">  v3[<span class="number">18</span>] = <span class="number">92</span>;</span><br><span class="line">  v3[<span class="number">19</span>] = <span class="number">29</span>;</span><br><span class="line">  v3[<span class="number">20</span>] = <span class="number">81</span>;</span><br><span class="line">  v3[<span class="number">21</span>] = <span class="number">107</span>;</span><br><span class="line">  v3[<span class="number">22</span>] = <span class="number">90</span>;</span><br><span class="line">  v3[<span class="number">23</span>] = <span class="number">85</span>;</span><br><span class="line">  v3[<span class="number">24</span>] = <span class="number">64</span>;</span><br><span class="line">  v3[<span class="number">25</span>] = <span class="number">12</span>;</span><br><span class="line">  v3[<span class="number">26</span>] = <span class="number">43</span>;</span><br><span class="line">  v3[<span class="number">27</span>] = <span class="number">76</span>;</span><br><span class="line">  v3[<span class="number">28</span>] = <span class="number">86</span>;</span><br><span class="line">  v3[<span class="number">29</span>] = <span class="number">13</span>;</span><br><span class="line">  v3[<span class="number">30</span>] = <span class="number">114</span>;</span><br><span class="line">  v3[<span class="number">31</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v4, <span class="string">&quot;u~&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">56</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v2[i] ^= v5[i];</span><br><span class="line">    v2[i] ^= <span class="number">0x13</span>u;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sub_45A7BE(<span class="string">&quot;%s\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>发现for循环里面有两个56大小的字符串v2和v6，然后进行异或运算，再将v2和0x13异或</p>
<p>由于异或运算的逆运算也是异或运算，那就将他们再异或一遍就行</p>
<p><strong>注：</strong>这里面要注意，不能被高级语言束缚思维，这里面的数组加下表应该理解成地址位移偏移量，因为这些地址是连续的，虽然他们在逻辑上似乎是数组越界，但实际上在地址中是连续的，并不存在越界。</p>
<p>python脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v6=[<span class="number">18</span>,<span class="number">64</span>,<span class="number">98</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">48</span>,<span class="number">49</span>,<span class="number">65</span>,<span class="number">32</span>,<span class="number">12</span>,<span class="number">48</span>,<span class="number">65</span>,<span class="number">31</span>,<span class="number">78</span>,<span class="number">62</span>,<span class="number">32</span>,<span class="number">49</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">57</span>,<span class="number">96</span>,<span class="number">3</span>,<span class="number">21</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">62</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">44</span>,<span class="number">65</span>,<span class="number">78</span>,<span class="number">32</span>,<span class="number">16</span>,<span class="number">97</span>,<span class="number">54</span>,<span class="number">16</span>,<span class="number">44</span>,<span class="number">52</span>,<span class="number">32</span>,<span class="number">64</span>,<span class="number">89</span>,<span class="number">45</span>,<span class="number">32</span>,<span class="number">65</span>,<span class="number">15</span>,<span class="number">34</span>,<span class="number">18</span>,<span class="number">16</span>]</span><br><span class="line">v3=[<span class="number">123</span>,<span class="number">32</span>,<span class="number">18</span>,<span class="number">98</span>,<span class="number">119</span>,<span class="number">108</span>,<span class="number">65</span>,<span class="number">41</span>,<span class="number">124</span>,<span class="number">80</span>,<span class="number">125</span>,<span class="number">38</span>,<span class="number">124</span>,<span class="number">111</span>,<span class="number">74</span>,<span class="number">49</span>,<span class="number">83</span>,<span class="number">108</span>,<span class="number">94</span>,<span class="number">108</span>,<span class="number">84</span>,<span class="number">6</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;&#123;&#x27;</span>,<span class="number">127</span>,<span class="number">119</span>,<span class="number">96</span>,<span class="number">48</span>,<span class="number">107</span>,<span class="number">71</span>,<span class="number">92</span>,<span class="number">29</span>,<span class="number">81</span>,<span class="number">107</span>,<span class="number">90</span>,<span class="number">85</span>,<span class="number">64</span>,<span class="number">12</span>,<span class="number">43</span>,<span class="number">76</span>,<span class="number">86</span>,<span class="number">13</span>,<span class="number">114</span>,<span class="number">1</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;~&#x27;</span>]</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">56</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(v3[i])==<span class="built_in">str</span>: s=v6[i]^<span class="built_in">ord</span>(v3[i])</span><br><span class="line">    <span class="keyword">else</span>: s=v6[i]^v3[i]</span><br><span class="line">    s^=<span class="number">0x13</span></span><br><span class="line">    flag+=<span class="built_in">chr</span>(s)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p><strong>zsctf{T9is_tOpic_1s_v55y_int7resting_b6t_others_are_n0t}</strong></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
        <tag>攻防世界</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界：logmein</title>
    <url>/2022/03/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Alogmein/</url>
    <content><![CDATA[<p>先拖到exeinfope看看</p>
<p>64位没壳</p>
<p><img src="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Alogmein/1.jpg" alt="1"></p>
<p>拖进IDA，找到main函数</p>
<p><strong>F5大法好啊！！！</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v3; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+3Ch] [rbp-54h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">36</span>]; <span class="comment">// [rsp+40h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+64h] [rbp-2Ch]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+68h] [rbp-28h]</span></span><br><span class="line">  <span class="type">char</span> v8[<span class="number">28</span>]; <span class="comment">// [rsp+70h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+8Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v8, <span class="string">&quot;:\&quot;AL_RT^L*.?+6/46&quot;</span>);</span><br><span class="line">  v7 = <span class="number">0x65626D61726168</span>LL;</span><br><span class="line">  v6 = <span class="number">7</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Welcome to the RC3 secure password guesser.\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;To continue, you must enter the correct password.\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter your guess: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%32s&quot;</span>, s);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; <span class="built_in">strlen</span>(v8) )</span><br><span class="line">    sub_4007C0();</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= <span class="built_in">strlen</span>(v8) )</span><br><span class="line">      sub_4007C0();</span><br><span class="line">    <span class="keyword">if</span> ( s[i] != (<span class="type">char</span>)(*((_BYTE *)&amp;v7 + i % v6) ^ v8[i]) )</span><br><span class="line">      sub_4007C0();</span><br><span class="line">  &#125;</span><br><span class="line">  sub_4007F0();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中可以发现</p>
<p>s是我们输入的flag字符串，而flag就等于v7[i%7]^v8[i]</p>
<p><strong>看看看看</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v7 = <span class="number">0x65626D61726168</span>LL;</span><br></pre></td></tr></table></figure>

<p>(_BYTE *)&amp;v7表示将原本是_int64类型的v7转换地址形式，转成byte型地址形式来实现1位一位读取。</p>
<p>这里还要注意的是这里的内存是小端存放的，需要逆着来查看v7的字符串</p>
<p>我们按一下R</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v7 = <span class="string">&#x27;ebmarah&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>倒过来</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v7 = <span class="string">&#x27;harambe&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>上python脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key1=<span class="string">&#x27;ebmarah&#x27;</span></span><br><span class="line">key=<span class="string">&#x27;harambe&#x27;</span></span><br><span class="line">s=<span class="string">&#x27;:\&quot;AL_RT^L*.?+6/46&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>((<span class="built_in">ord</span>(key[i%<span class="number">7</span>]))^<span class="built_in">ord</span>(s[i]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p><img src="./%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Alogmein/2.jpg" alt="2"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
        <tag>攻防世界</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界：no-strings-attached</title>
    <url>/2022/03/27/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Ano-strings-attached/</url>
    <content><![CDATA[<p>老规矩，拖进exeinfope查一查，32位，没壳</p>
<p><img src="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Ano-strings-attached/1.png" alt="1"></p>
<p>拖进IDA，找到main函数，发现只有简单的几个函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  setlocale(<span class="number">6</span>, &amp;locale);</span><br><span class="line">  banner();</span><br><span class="line">  prompt_authentication();</span><br><span class="line">  authenticate();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>依次点开，发现只有authenticate函数是正经函数，而authenticate意思是程序的验证身份</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">authenticate</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">wchar_t</span> ws[<span class="number">8192</span>]; <span class="comment">// [esp+1Ch] [ebp-800Ch] BYREF</span></span><br><span class="line">  <span class="type">wchar_t</span> *s2; <span class="comment">// [esp+801Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  s2 = (<span class="type">wchar_t</span> *)decrypt((<span class="type">wchar_t</span> *)&amp;s, (<span class="type">wchar_t</span> *)&amp;dword_8048A90);</span><br><span class="line">  <span class="keyword">if</span> ( fgetws(ws, <span class="number">0x2000</span>, <span class="built_in">stdin</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    ws[wcslen(ws) - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !wcscmp(ws, s2) )</span><br><span class="line">      wprintf(&amp;unk_8048B44);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      wprintf(&amp;unk_8048BA4);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现，wcscmp函数将输入的ws与decrypt加密函数生成的s2作比较</p>
<p>如果相同就输出unk_8048B44处的字符串，点进去发现是”Success!Welcome back!”</p>
<p>可以推测出，s2就是我们要的flag</p>
<p>点进decrypt函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">wchar_t</span> *__cdecl <span class="title function_">decrypt</span><span class="params">(<span class="type">wchar_t</span> *s, <span class="type">wchar_t</span> *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> i; <span class="comment">// [esp+20h] [ebp-18h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v6; <span class="comment">// [esp+24h] [ebp-14h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v7; <span class="comment">// [esp+28h] [ebp-10h]</span></span><br><span class="line">  <span class="type">wchar_t</span> *dest; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v6 = wcslen(s);</span><br><span class="line">  v7 = wcslen(a2);</span><br><span class="line">  v2 = wcslen(s);</span><br><span class="line">  dest = (<span class="type">wchar_t</span> *)<span class="built_in">malloc</span>(v2 + <span class="number">1</span>);</span><br><span class="line">  wcscpy(dest, s);</span><br><span class="line">  <span class="keyword">while</span> ( v4 &lt; v6 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v7 &amp;&amp; v4 &lt; v6; ++i )</span><br><span class="line">      dest[v4++] -= a2[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实就是把s的每一位都减去a2循环的位</p>
<p>而s对应(wchar_t *)&amp;s，a2对应(wchar_t *)&amp;dword_8048A90</p>
<p><img src="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Ano-strings-attached/2.png" alt="2"></p>
<h1 id="方法一：C语言数组"><a href="#方法一：C语言数组" class="headerlink" title="方法一：C语言数组"></a>方法一：C语言数组</h1><p><strong>shift加E提取字符串</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> s[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x3A</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x36</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x37</span>, <span class="number">0x14</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x7A</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x71</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x78</span>, <span class="number">0x14</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x63</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x73</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x67</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x62</span>, <span class="number">0x14</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x73</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x60</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6B</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x71</span>, <span class="number">0x14</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x78</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x73</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x64</span>, <span class="number">0x14</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x78</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6E</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x70</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x64</span>, <span class="number">0x14</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x64</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x6E</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7B</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x76</span>, <span class="number">0x14</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x78</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x73</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7B</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x14</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;<span class="number">156</span>;++i)&#123;</span><br><span class="line">		<span class="type">char</span> x=s[i]-ida_chars[j++%<span class="number">20</span>];</span><br><span class="line">		<span class="keyword">if</span> (x!=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="方法二：python脚本"><a href="#方法二：python脚本" class="headerlink" title="方法二：python脚本"></a>方法二：python脚本</h1><p>拿s来说，s的地址是0x08048AA8，用*查看数组的大小和数组中元素的大小，去掉最后一个零</p>
<p><img src="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Ano-strings-attached/3.png" alt="3"></p>
<p>shift+F2用python写脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">addr=<span class="number">0x08048AA8</span></span><br><span class="line">arr=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    arr.append(Dword(addr+<span class="number">4</span>*i))</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure>

<p>得到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dest=[<span class="number">5178</span>, <span class="number">5174</span>, <span class="number">5175</span>, <span class="number">5179</span>, <span class="number">5248</span>, <span class="number">5242</span>, <span class="number">5233</span>, <span class="number">5240</span>, <span class="number">5219</span>, <span class="number">5222</span>, <span class="number">5235</span>, <span class="number">5223</span>, <span class="number">5218</span>, <span class="number">5221</span>, <span class="number">5235</span>, <span class="number">5216</span>, <span class="number">5227</span>, <span class="number">5233</span>, <span class="number">5240</span>, <span class="number">5226</span>, <span class="number">5235</span>, <span class="number">5232</span>, <span class="number">5220</span>, <span class="number">5240</span>, <span class="number">5230</span>, <span class="number">5232</span>, <span class="number">5232</span>, <span class="number">5220</span>, <span class="number">5232</span>, <span class="number">5220</span>, <span class="number">5230</span>, <span class="number">5243</span>, <span class="number">5238</span>, <span class="number">5240</span>, <span class="number">5226</span>, <span class="number">5235</span>, <span class="number">5243</span>, <span class="number">5248</span>]</span><br></pre></td></tr></table></figure>

<p>同理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a2=[<span class="number">5121</span>, <span class="number">5122</span>, <span class="number">5123</span>, <span class="number">5124</span>, <span class="number">5125</span>]</span><br></pre></td></tr></table></figure>

<p>写python脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a2=[<span class="number">5121</span>, <span class="number">5122</span>, <span class="number">5123</span>, <span class="number">5124</span>, <span class="number">5125</span>]</span><br><span class="line">dest=[<span class="number">5178</span>, <span class="number">5174</span>, <span class="number">5175</span>, <span class="number">5179</span>, <span class="number">5248</span>, <span class="number">5242</span>, <span class="number">5233</span>, <span class="number">5240</span>, <span class="number">5219</span>, <span class="number">5222</span>, <span class="number">5235</span>, <span class="number">5223</span>, <span class="number">5218</span>, <span class="number">5221</span>, <span class="number">5235</span>, <span class="number">5216</span>, <span class="number">5227</span>, <span class="number">5233</span>, <span class="number">5240</span>, <span class="number">5226</span>, <span class="number">5235</span>, <span class="number">5232</span>, <span class="number">5220</span>, <span class="number">5240</span>, <span class="number">5230</span>, <span class="number">5232</span>, <span class="number">5232</span>, <span class="number">5220</span>, <span class="number">5232</span>, <span class="number">5220</span>, <span class="number">5230</span>, <span class="number">5243</span>, <span class="number">5238</span>, <span class="number">5240</span>, <span class="number">5226</span>, <span class="number">5235</span>, <span class="number">5243</span>, <span class="number">5248</span>]</span><br><span class="line">i=j=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">38</span>:</span><br><span class="line">    j=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> j&lt;<span class="number">5</span> <span class="keyword">and</span> i&lt;<span class="number">38</span>:</span><br><span class="line">        dest[i]-=a2[j]</span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(dest[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="方法三：设置断点"><a href="#方法三：设置断点" class="headerlink" title="方法三：设置断点"></a>方法三：设置断点</h1>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
        <tag>攻防世界</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界：re4-unvm-me</title>
    <url>/2022/04/07/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Are4-unvm-me/</url>
    <content><![CDATA[<p>下载发现是一个pyc文件，拖到<a href="https://tool.lu/pyc/">python反编译在线工具</a>得到源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="keyword">import</span> md5</span><br><span class="line">md5s = [</span><br><span class="line">    <span class="number">0x831DAA3C843BA8B087C895F0ED305CE7L</span>,</span><br><span class="line">    <span class="number">0x6722F7A07246C6AF20662B855846C2C8L</span>,</span><br><span class="line">    <span class="number">0x5F04850FEC81A27AB5FC98BEFA4EB40CL</span>,</span><br><span class="line">    <span class="number">0xECF8DCAC7503E63A6A3667C5FB94F610L</span>,</span><br><span class="line">    <span class="number">0xC0FD15AE2C3931BC1E140523AE934722L</span>,</span><br><span class="line">    <span class="number">0x569F606FD6DA5D612F10CFB95C0BDE6DL</span>,</span><br><span class="line">    <span class="number">0x68CB5A1CF54C078BF0E7E89584C1A4EL</span>,</span><br><span class="line">    <span class="number">0xC11E2CD82D1F9FBD7E4D6EE9581FF3BDL</span>,</span><br><span class="line">    <span class="number">0x1DF4C637D625313720F45706A48FF20FL</span>,</span><br><span class="line">    <span class="number">0x3122EF3A001AAECDB8DD9D843C029E06L</span>,</span><br><span class="line">    <span class="number">0xADB778A0F729293E7E0B19B96A4C5A61L</span>,</span><br><span class="line">    <span class="number">0x938C747C6A051B3E163EB802A325148EL</span>,</span><br><span class="line">    <span class="number">0x38543C5E820DD9403B57BEFF6020596DL</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Can you turn me back to python ? ...&#x27;</span></span><br><span class="line">flag = raw_input(<span class="string">&#x27;well as you wish.. what is the flag: &#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) &gt; <span class="number">69</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;nice try&#x27;</span></span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) % <span class="number">5</span> != <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;nice try&#x27;</span></span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="number">5</span>):</span><br><span class="line">    s = flag[i:i + <span class="number">5</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(<span class="string">&#x27;0x&#x27;</span> + md5.new(s).hexdigest(), <span class="number">16</span>) != md5s[i / <span class="number">5</span>]:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;nice try&#x27;</span></span><br><span class="line">        exit()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Congratz now you have the flag&#x27;</span></span><br></pre></td></tr></table></figure>

<p>发现flag的长度要&lt;=69，而且是5的倍数</p>
<p>for循环中是把flag的每5个字符转成md5码与列表中的元素比较</p>
<p>把列表中的元素处理一下，<strong>0x68CB5A1CF54C078BF0E7E89584C1A4EL要加上一个0</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">md5s = [</span><br><span class="line">    831DAA3C843BA8B087C895F0ED305CE7,</span><br><span class="line">    6722F7A07246C6AF20662B855846C2C8,</span><br><span class="line">    5F04850FEC81A27AB5FC98BEFA4EB40C,</span><br><span class="line">    ECF8DCAC7503E63A6A3667C5FB94F610,</span><br><span class="line">    C0FD15AE2C3931BC1E140523AE934722,</span><br><span class="line">    569F606FD6DA5D612F10CFB95C0BDE6D,</span><br><span class="line">    068CB5A1CF54C078BF0E7E89584C1A4E,</span><br><span class="line">    C11E2CD82D1F9FBD7E4D6EE9581FF3BD,</span><br><span class="line">    1DF4C637D625313720F45706A48FF20F,</span><br><span class="line">    3122EF3A001AAECDB8DD9D843C029E06,</span><br><span class="line">    ADB778A0F729293E7E0B19B96A4C5A61,</span><br><span class="line">    938C747C6A051B3E163EB802A325148E,</span><br><span class="line">    38543C5E820DD9403B57BEFF6020596D]</span><br></pre></td></tr></table></figure>

<p>在<a href="https://www.cmd5.com/">cmd5网站</a>中查询，发现有两个需要需要付费</p>
<p>于是有了<a href="https://www.somd5.com/">somd5网站</a>免费查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">md5s = [</span><br><span class="line">    ALEXC,</span><br><span class="line">    TF&#123;dv,</span><br><span class="line">    5d4s2,</span><br><span class="line">    vj8nk,</span><br><span class="line">    43s8d,</span><br><span class="line">    8l6m1,</span><br><span class="line">    n5l67,</span><br><span class="line">    ds9v4,</span><br><span class="line">    1n52n,</span><br><span class="line">    v37j4,</span><br><span class="line">    81h3d,</span><br><span class="line">    28n4b,</span><br><span class="line">    6v3k&#125;]</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ALEXCTF&#123;dv5d4s2vj8nk43s8d8l6m1n5l67ds9v41n52nv37j481h3d28n4b6v3k&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
        <tag>攻防世界</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷：P1553数字反转（升级版）</title>
    <url>/2021/06/18/%E6%B4%9B%E8%B0%B7%EF%BC%9AP1553%E6%95%B0%E5%AD%97%E5%8F%8D%E8%BD%AC%EF%BC%88%E5%8D%87%E7%BA%A7%E7%89%88%EF%BC%89/</url>
    <content><![CDATA[<h1 id="本蒟蒻第一次写题解"><a href="#本蒟蒻第一次写题解" class="headerlink" title="本蒟蒻第一次写题解"></a>本<strong>蒟蒻</strong>第一次写题解</h1><p>这也是第一个全部做完的题单中最后做完的一题<br>（【入门5】字符串）</p>
<p>/doge</p>
<hr>
<p>题目中要求反转数字，其中有两种不同的规则</p>
<h2 id="一：反转后-去掉前面多余的零"><a href="#一：反转后-去掉前面多余的零" class="headerlink" title="一：反转后 去掉前面多余的零"></a>一：反转后 去掉前面多余的零</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reserve_zheng</span><span class="params">(<span class="type">int</span> left,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left+<span class="number">1</span>==right &amp;&amp; str[left]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (loc=right<span class="number">-1</span>;loc&gt;=left;--loc)&#123;</span><br><span class="line">        <span class="keyword">if</span> (str[loc]!=<span class="string">&#x27;0&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=loc;i&gt;=left;--i) cout&lt;&lt;str[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为这是emmm<del>整</del>数的反转 就起成reserve_zheng（奇怪的命名规则增加了）</p>
<p>因为要去掉反转后的前面的零 所以我从后面开始查找（其实可以用while 但佛for循环更直接一些） 把第一个非0的位置用loc保存 并从loc向前打印 这样就完成了反转后去掉多余的0</p>
<h4 id="注一下："><a href="#注一下：" class="headerlink" title="注一下："></a>注一下：</h4><p>参数列表中的left为反转字符串的开始位置 right为反转字符串结尾位置的下一个位置（就str[5]=”a123”中 要反转123 那么left=1 right=4）</p>
<h2 id="二：反转后-去掉后面多余的零"><a href="#二：反转后-去掉后面多余的零" class="headerlink" title="二：反转后 去掉后面多余的零"></a>二：反转后 去掉后面多余的零</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reserve_xiao</span><span class="params">(<span class="type">int</span> left,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left+<span class="number">1</span>==right &amp;&amp; str[left]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (loc=left;loc&lt;right;++loc)&#123;</span><br><span class="line">        <span class="keyword">if</span> (str[loc]!=<span class="string">&#x27;0&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (loc==right)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=right<span class="number">-1</span>;i&gt;=loc;--i)&#123;</span><br><span class="line">        cout&lt;&lt;str[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><del>小</del>数的反转就叫reserve_xiao</p>
<p>去掉反转后 尾部多余的零也是如此 从原字符串前面查找第一个非0元素 然后用loc保存</p>
<p>这样从后往前打印到loc的位置 就完成的小数的反转</p>
<hr>
<h3 id="似乎圆满了-但有一点需要注意"><a href="#似乎圆满了-但有一点需要注意" class="headerlink" title="似乎圆满了 但有一点需要注意"></a>似乎圆满了 但有一点需要注意</h3><p>如果</p>
<p>整数小数只有一个0 或者 小数全是0 怎么办？</p>
<hr>
<h2 id="那就加特判呗"><a href="#那就加特判呗" class="headerlink" title="那就加特判呗"></a>那就加特判呗</h2><h4 id="整数小数只有一个0"><a href="#整数小数只有一个0" class="headerlink" title="整数小数只有一个0"></a>整数小数只有一个0</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (left+<span class="number">1</span>==right &amp;&amp; str[left]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">    cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时字符串长度为1 left指向字符串的开始 right指向字符串的结尾</p>
<p>长度为1   ===&gt;   left+1==right</p>
<p>且</p>
<p>字符还要是’0’   ===&gt;   str[left]==’0’</p>
<hr>
<h4 id="小数有好多0"><a href="#小数有好多0" class="headerlink" title="小数有好多0"></a>小数有好多0</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (loc==right)&#123;</span><br><span class="line">    cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前面查找非0元素 都没找到</p>
<p>那么此时loc应该指向字符串结尾的最后一个字符   ===&gt;   loc==right</p>
<p>这样 我们可以 非（简）常（单）优（粗）美（暴）的<br><del>cout&lt;&lt;0;</del><br> 再<br>return ;</p>
<hr>
<hr>
<h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><p>先放一波代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;str;</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">reserve_zheng</span>(<span class="number">0</span>,i);</span><br><span class="line">            cout&lt;&lt;str[i];</span><br><span class="line">            <span class="built_in">reserve_xiao</span>(i+<span class="number">1</span>,len);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (str[i]==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">reserve_zheng</span>(<span class="number">0</span>,i);</span><br><span class="line">            cout&lt;&lt;str[i];</span><br><span class="line">            <span class="built_in">reserve_zheng</span>(i+<span class="number">1</span>,len);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (str[i]==<span class="string">&#x27;%&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">reserve_zheng</span>(<span class="number">0</span>,i);</span><br><span class="line">            cout&lt;&lt;str[i];</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">reserve_zheng</span>(<span class="number">0</span>,len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遍历一遍 看看有没有 / 或者 . 或者 %<br>这类的特殊符号<br>如果有 用i标记当前符号位置</p>
<h4 id="要是有-就按照相应的反转规则来处理"><a href="#要是有-就按照相应的反转规则来处理" class="headerlink" title="要是有 就按照相应的反转规则来处理"></a>要是有 就按照相应的反转规则来处理</h4><hr>
<ol>
<li>如果有. 说明我们要反转的是小数</li>
</ol>
<hr>
<p>对于小数点两边</p>
<p>小数点前反转整数 小数点后反转小数</p>
<p>那么reserve_zheng(0,i)</p>
<p>中间cout&lt;&lt;’.’;</p>
<p>再reserve_xiao(i+1,l);</p>
<hr>
<ol start="2">
<li>如果有/ 说明我们要反转的是分数</li>
</ol>
<hr>
<p>对于分数两边</p>
<p>小数点前反转整数 分号点后反转整数</p>
<p>那么reserve_zheng(0,i)</p>
<p>中间cout&lt;&lt;’.’;</p>
<p>再reserve_zheng(i+1,l);</p>
<hr>
<ol start="3">
<li>如果有% 说明我们要反转的是百分数</li>
</ol>
<hr>
<p>百分数跟整数没啥区别（就多了个%）</p>
<p>直接按照整数反转的处理</p>
<p>reserve_zheng（0，i）;</p>
<p>或者直接(0，len-1)</p>
<hr>
<h4 id="要是没有-说明只是一个整数"><a href="#要是没有-说明只是一个整数" class="headerlink" title="要是没有 说明只是一个整数"></a>要是没有 说明只是一个整数</h4><p>直接反转 reserve_zheng(0，len);</p>
<hr>
<p>AC代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> loc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reserve_zheng</span><span class="params">(<span class="type">int</span> left,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left+<span class="number">1</span>==right &amp;&amp; str[left]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (loc=right<span class="number">-1</span>;loc&gt;=left;--loc)&#123;</span><br><span class="line">        <span class="keyword">if</span> (str[loc]!=<span class="string">&#x27;0&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=loc;i&gt;=left;--i) cout&lt;&lt;str[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reserve_xiao</span><span class="params">(<span class="type">int</span> left,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left+<span class="number">1</span>==right &amp;&amp; str[left]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (loc=left;loc&lt;right;++loc)&#123;</span><br><span class="line">        <span class="keyword">if</span> (str[loc]!=<span class="string">&#x27;0&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (loc==right)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=right<span class="number">-1</span>;i&gt;=loc;--i)&#123;</span><br><span class="line">        cout&lt;&lt;str[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;str;</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">reserve_zheng</span>(<span class="number">0</span>,i);</span><br><span class="line">            cout&lt;&lt;str[i];</span><br><span class="line">            <span class="built_in">reserve_xiao</span>(i+<span class="number">1</span>,len);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (str[i]==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">reserve_zheng</span>(<span class="number">0</span>,i);</span><br><span class="line">            cout&lt;&lt;str[i];</span><br><span class="line">            <span class="built_in">reserve_zheng</span>(i+<span class="number">1</span>,len);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (str[i]==<span class="string">&#x27;%&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">reserve_zheng</span>(<span class="number">0</span>,i);</span><br><span class="line">            cout&lt;&lt;str[i];</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">reserve_zheng</span>(<span class="number">0</span>,len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="若有错误-敬请批评指正"><a href="#若有错误-敬请批评指正" class="headerlink" title="若有错误 敬请批评指正"></a>若有错误 敬请批评指正</h1>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>ACM</tag>
        <tag>题解</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
</search>
